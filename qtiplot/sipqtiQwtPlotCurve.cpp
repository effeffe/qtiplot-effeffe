/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 743 "src/scripting/qti.sip"
#include <qwt_plot_curve.h>
#include "Graph.h"
#line 13 "./sipqtiQwtPlotCurve.cpp"

#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 17 "./sipqtiQwtPlotCurve.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 20 "./sipqtiQwtPlotCurve.cpp"
#line 648 "src/scripting/qti.sip"
#include <qwt_symbol.h>
#include "ColorButton.h"
#line 24 "./sipqtiQwtPlotCurve.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qbrush.sip"
#include <qbrush.h>
#line 27 "./sipqtiQwtPlotCurve.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpen.sip"
#include <qpen.h>
#line 30 "./sipqtiQwtPlotCurve.cpp"


extern "C" {static PyObject *meth_QwtPlotCurve_dataSize(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_dataSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dataSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_dataSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_x(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QwtPlotCurve, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->x(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_x, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_y(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QwtPlotCurve, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->y(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_y, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_minXValue(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_minXValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->minXValue();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_minXValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_maxXValue(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_maxXValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->maxXValue();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_maxXValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_minYValue(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_minYValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->minYValue();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_minYValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_maxYValue(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_maxYValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->maxYValue();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_maxYValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_xAxis(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_xAxis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->xAxis();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_xAxis, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setXAxis(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setXAxis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QwtPlotCurve, &sipCpp, &a0))
        {
            sipCpp->setXAxis(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setXAxis, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_yAxis(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_yAxis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->yAxis();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_yAxis, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setYAxis(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setYAxis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QwtPlotCurve, &sipCpp, &a0))
        {
            sipCpp->setYAxis(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setYAxis, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setPen(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QwtPlotCurve, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setPen(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_pen(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_pen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->pen());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_pen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QwtPlotCurve, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBrush(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setBrush, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_brush(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_brush, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setSymbol(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setSymbol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtSymbol* a0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QwtPlotCurve, &sipCpp, sipType_QwtSymbol, &a0))
        {
            sipCpp->setSymbol(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setSymbol, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_symbol(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_symbol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QwtPlotCurve, &sipCpp))
        {
            const  ::QwtSymbol*sipRes;

            sipRes = &sipCpp->symbol();

            return sipConvertFromType(const_cast< ::QwtSymbol *>(sipRes),sipType_QwtSymbol,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_symbol, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setColor(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QwtPlotCurve, &sipCpp, sipType_QColor, &a0, &a0State))
        {
#line 774 "src/scripting/qti.sip"
	QPen pen = sipCpp->pen();
	pen.setColor(*a0);
	sipCpp->setPen(pen);
	QBrush brush = sipCpp->brush();
	brush.setColor(*a0);
	sipCpp->setBrush(brush);
#line 483 "./sipqtiQwtPlotCurve.cpp"
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QwtPlotCurve, &sipCpp, &a0))
        {
#line 783 "src/scripting/qti.sip"
	QPen pen = sipCpp->pen();
	pen.setColor(ColorButton::color(a0));
	sipCpp->setPen(pen);
	QBrush brush = sipCpp->brush();
	brush.setColor(ColorButton::color(a0));
	sipCpp->setBrush(brush);
#line 504 "./sipqtiQwtPlotCurve.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setColor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setOutlineColor(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setOutlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QwtPlotCurve, &sipCpp, sipType_QColor, &a0, &a0State))
        {
#line 792 "src/scripting/qti.sip"
	QPen pen = sipCpp->pen();
	pen.setColor(*a0);
	sipCpp->setPen(pen);
#line 534 "./sipqtiQwtPlotCurve.cpp"
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QwtPlotCurve, &sipCpp, &a0))
        {
#line 798 "src/scripting/qti.sip"
	QPen pen = sipCpp->pen();
	pen.setColor(ColorButton::color(a0));
	sipCpp->setPen(pen);
#line 552 "./sipqtiQwtPlotCurve.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setOutlineColor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setFillColor(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setFillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QwtPlotCurve, &sipCpp, sipType_QColor, &a0, &a0State))
        {
#line 804 "src/scripting/qti.sip"
	QBrush brush = sipCpp->brush();
	brush.setColor(*a0);
	sipCpp->setBrush(brush);
#line 582 "./sipqtiQwtPlotCurve.cpp"
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QwtPlotCurve, &sipCpp, &a0))
        {
#line 810 "src/scripting/qti.sip"
	QBrush brush = sipCpp->brush();
	brush.setColor(ColorButton::color(a0));
	sipCpp->setBrush(brush);
#line 600 "./sipqtiQwtPlotCurve.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setFillColor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QwtPlotCurve_setFillStyle(PyObject *, PyObject *);}
static PyObject *meth_QwtPlotCurve_setFillStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::BrushStyle a0;
         ::QwtPlotCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QwtPlotCurve, &sipCpp, sipType_Qt_BrushStyle, &a0))
        {
#line 816 "src/scripting/qti.sip"
	QBrush brush = sipCpp->brush();
	brush.setStyle(a0);
	sipCpp->setBrush(brush);
#line 629 "./sipqtiQwtPlotCurve.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QwtPlotCurve, sipName_setFillStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QwtPlotCurve(void *, int);}
static void release_QwtPlotCurve(void *sipCppV, int)
{
    delete reinterpret_cast< ::QwtPlotCurve *>(sipCppV);
}


extern "C" {static void dealloc_QwtPlotCurve(sipSimpleWrapper *);}
static void dealloc_QwtPlotCurve(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QwtPlotCurve(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_QwtPlotCurve[] = {
    {SIP_MLNAME_CAST(sipName_brush), meth_QwtPlotCurve_brush, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_dataSize), meth_QwtPlotCurve_dataSize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_maxXValue), meth_QwtPlotCurve_maxXValue, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_maxYValue), meth_QwtPlotCurve_maxYValue, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_minXValue), meth_QwtPlotCurve_minXValue, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_minYValue), meth_QwtPlotCurve_minYValue, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_pen), meth_QwtPlotCurve_pen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QwtPlotCurve_setBrush, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QwtPlotCurve_setColor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setFillColor), meth_QwtPlotCurve_setFillColor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setFillStyle), meth_QwtPlotCurve_setFillStyle, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setOutlineColor), meth_QwtPlotCurve_setOutlineColor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setPen), meth_QwtPlotCurve_setPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setSymbol), meth_QwtPlotCurve_setSymbol, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setXAxis), meth_QwtPlotCurve_setXAxis, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setYAxis), meth_QwtPlotCurve_setYAxis, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_symbol), meth_QwtPlotCurve_symbol, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_x), meth_QwtPlotCurve_x, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xAxis), meth_QwtPlotCurve_xAxis, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_y), meth_QwtPlotCurve_y, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_yAxis), meth_QwtPlotCurve_yAxis, METH_VARARGS, SIP_NULLPTR}
};


static pyqt4ClassPluginDef plugin_QwtPlotCurve = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_QwtPlotCurve = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_QwtPlotCurve,
        {SIP_NULLPTR},
        &plugin_QwtPlotCurve
    },
    {
        sipNameNr_QwtPlotCurve,
        {0, 0, 1},
        21, methods_QwtPlotCurve,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QwtPlotCurve,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QwtPlotCurve,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
