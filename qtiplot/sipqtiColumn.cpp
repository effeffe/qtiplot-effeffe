/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 132 "src/scripting/qti.sip"
#include "globals.h"
#include "core/column/Column.h"
#include "table/future_Table.h"
#include "core/datatypes/DateTime2StringFilter.h"
#line 15 "./sipqtiColumn.cpp"

#line 199 "/usr/share/sip/PyQt4/QtCore/qvector.sip"
#include <qvector.h>
#line 19 "./sipqtiColumn.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 22 "./sipqtiColumn.cpp"
#line 397 "/usr/share/sip/PyQt4/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 25 "./sipqtiColumn.cpp"
#line 241 "/usr/share/sip/PyQt4/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 28 "./sipqtiColumn.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 31 "./sipqtiColumn.cpp"
#line 27 "/usr/share/sip/PyQt4/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 34 "./sipqtiColumn.cpp"
#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 37 "./sipqtiColumn.cpp"
#line 60 "src/scripting/qti.sip"
#include "core/AbstractAspect.h"
#line 40 "./sipqtiColumn.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qicon.sip"
#include <qicon.h>
#line 43 "./sipqtiColumn.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "./sipqtiColumn.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "./sipqtiColumn.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "./sipqtiColumn.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 55 "./sipqtiColumn.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 58 "./sipqtiColumn.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 61 "./sipqtiColumn.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 64 "./sipqtiColumn.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "./sipqtiColumn.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 70 "./sipqtiColumn.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 73 "./sipqtiColumn.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 76 "./sipqtiColumn.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 79 "./sipqtiColumn.cpp"


extern "C" {static PyObject *meth_Column_columnMode(PyObject *, PyObject *);}
static PyObject *meth_Column_columnMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 147 "src/scripting/qti.sip"
		int mode = sipCpp->columnMode();
		sipRes = PYUNICODE_FromString(SciDAVis::enumValueToString(mode, "ColumnMode").toUtf8().constData());
#line 97 "./sipqtiColumn.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_columnMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setColumnMode(PyObject *, PyObject *);}
static PyObject *meth_Column_setColumnMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Column, &sipCpp, sipType_QString,&a0, &a0State))
        {
#line 152 "src/scripting/qti.sip"
		int mode_code = SciDAVis::enumStringToValue(*a0, "ColumnMode");
		if(mode_code != -1)
			sipCpp->setColumnMode((SciDAVis::ColumnMode)mode_code);
#line 126 "./sipqtiColumn.cpp"
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setColumnMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_copy(PyObject *, PyObject *);}
static PyObject *meth_Column_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Column* a0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_Column, &sipCpp, sipType_Column, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->copy(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::Column* a0;
        int a1;
        int a2;
        int a3;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iii", &sipSelf, sipType_Column, &sipCpp, sipType_Column, &a0, &a1, &a2, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->copy(a0,a1,a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_copy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_rowCount(PyObject *, PyObject *);}
static PyObject *meth_Column_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_rowCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_insertRows(PyObject *, PyObject *);}
static PyObject *meth_Column_insertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_Column, &sipCpp, &a0, &a1))
        {
            sipCpp->insertRows(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_insertRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_removeRows(PyObject *, PyObject *);}
static PyObject *meth_Column_removeRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_Column, &sipCpp, &a0, &a1))
        {
            sipCpp->removeRows(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_removeRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_columnFormat(PyObject *, PyObject *);}
static PyObject *meth_Column_columnFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 163 "src/scripting/qti.sip"
		QString filterformat=QString();
		if (auto filter = dynamic_cast<DateTime2StringFilter*>(sipCpp->outputFilter()))
		{
			filterformat = filter->format();
		}
		sipRes = PYUNICODE_FromString(filterformat.toUtf8().constData());
#line 280 "./sipqtiColumn.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_columnFormat, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setColumnFormat(PyObject *, PyObject *);}
static PyObject *meth_Column_setColumnFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Column, &sipCpp, sipType_QString,&a0, &a0State))
        {
#line 172 "src/scripting/qti.sip"
		if (auto filter = dynamic_cast<DateTime2StringFilter*>(sipCpp->outputFilter()))
		{
			filter->setFormat(*a0);
		}
#line 310 "./sipqtiColumn.cpp"
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setColumnFormat, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_plotDesignation(PyObject *, PyObject *);}
static PyObject *meth_Column_plotDesignation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 179 "src/scripting/qti.sip"
		int pd = sipCpp->plotDesignation();
		sipRes = PYUNICODE_FromString(SciDAVis::enumValueToString(pd, "PlotDesignation").toUtf8().constData());
#line 340 "./sipqtiColumn.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_plotDesignation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setPlotDesignation(PyObject *, PyObject *);}
static PyObject *meth_Column_setPlotDesignation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Column, &sipCpp, sipType_QString,&a0, &a0State))
        {
#line 184 "src/scripting/qti.sip"
		int mode_code = SciDAVis::enumStringToValue(*a0, "PlotDesignation");
		if(mode_code != -1)
			sipCpp->setPlotDesignation((SciDAVis::PlotDesignation)mode_code);
#line 369 "./sipqtiColumn.cpp"
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setPlotDesignation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_clear(PyObject *, PyObject *);}
static PyObject *meth_Column_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_isInvalid(PyObject *, PyObject *);}
static PyObject *meth_Column_isInvalid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Column, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isInvalid(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_isInvalid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_clearValidity(PyObject *, PyObject *);}
static PyObject *meth_Column_clearValidity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
            sipCpp->clearValidity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_clearValidity, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setInvalid(PyObject *, PyObject *);}
static PyObject *meth_Column_setInvalid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        bool a1 = 1;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|b", &sipSelf, sipType_Column, &sipCpp, &a0, &a1))
        {
            sipCpp->setInvalid(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setInvalid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_formula(PyObject *, PyObject *);}
static PyObject *meth_Column_formula(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Column, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->formula(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_formula, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setFormula(PyObject *, PyObject *);}
static PyObject *meth_Column_setFormula(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QString* a1;
        int a1State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_Column, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setFormula(a0,*a1);
            sipReleaseType(a1,sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setFormula, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_clearFormulas(PyObject *, PyObject *);}
static PyObject *meth_Column_clearFormulas(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
            sipCpp->clearFormulas();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_clearFormulas, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_textAt(PyObject *, PyObject *);}
static PyObject *meth_Column_textAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Column, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->textAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_textAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setTextAt(PyObject *, PyObject *);}
static PyObject *meth_Column_setTextAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_Column, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTextAt(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setTextAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_replaceTexts(PyObject *, PyObject *);}
static PyObject *meth_Column_replaceTexts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QStringList* a1;
        int a1State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_Column, &sipCpp, &a0, sipType_QStringList,&a1, &a1State))
        {
            sipCpp->replaceTexts(a0,*a1);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_replaceTexts, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_dateAt(PyObject *, PyObject *);}
static PyObject *meth_Column_dateAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Column, &sipCpp, &a0))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->dateAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_dateAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setDateAt(PyObject *, PyObject *);}
static PyObject *meth_Column_setDateAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDate* a1;
        int a1State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_Column, &sipCpp, &a0, sipType_QDate, &a1, &a1State))
        {
            sipCpp->setDateAt(a0,*a1);
            sipReleaseType(const_cast< ::QDate *>(a1),sipType_QDate,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setDateAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_timeAt(PyObject *, PyObject *);}
static PyObject *meth_Column_timeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Column, &sipCpp, &a0))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->timeAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_timeAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setTimeAt(PyObject *, PyObject *);}
static PyObject *meth_Column_setTimeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTime* a1;
        int a1State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_Column, &sipCpp, &a0, sipType_QTime, &a1, &a1State))
        {
            sipCpp->setTimeAt(a0,*a1);
            sipReleaseType(const_cast< ::QTime *>(a1),sipType_QTime,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setTimeAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_dateTimeAt(PyObject *, PyObject *);}
static PyObject *meth_Column_dateTimeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Column, &sipCpp, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->dateTimeAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_dateTimeAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setDateTimeAt(PyObject *, PyObject *);}
static PyObject *meth_Column_setDateTimeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDateTime* a1;
        int a1State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_Column, &sipCpp, &a0, sipType_QDateTime, &a1, &a1State))
        {
            sipCpp->setDateTimeAt(a0,*a1);
            sipReleaseType(const_cast< ::QDateTime *>(a1),sipType_QDateTime,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setDateTimeAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_replaceDateTimes(PyObject *, PyObject *);}
static PyObject *meth_Column_replaceDateTimes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const QList< ::QDateTime>* a1;
        int a1State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_Column, &sipCpp, &a0, sipType_QList_0100QDateTime,&a1, &a1State))
        {
            sipCpp->replaceDateTimes(a0,*a1);
            sipReleaseType(const_cast<QList< ::QDateTime> *>(a1),sipType_QList_0100QDateTime,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_replaceDateTimes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_valueAt(PyObject *, PyObject *);}
static PyObject *meth_Column_valueAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Column, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->valueAt(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_valueAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_setValueAt(PyObject *, PyObject *);}
static PyObject *meth_Column_setValueAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        double a1;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bid", &sipSelf, sipType_Column, &sipCpp, &a0, &a1))
        {
            sipCpp->setValueAt(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_setValueAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_replaceValues(PyObject *, PyObject *);}
static PyObject *meth_Column_replaceValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVector< ::qreal>* a1;
        int a1State = 0;
         ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_Column, &sipCpp, &a0, sipType_QVector_2400,&a1, &a1State))
        {
            sipCpp->replaceValues(a0,*a1);
            sipReleaseType(const_cast< ::QVector< ::qreal> *>(a1),sipType_QVector_2400,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_replaceValues, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_x(PyObject *, PyObject *);}
static PyObject *meth_Column_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
             ::Column*sipRes = 0;

#line 214 "src/scripting/qti.sip"
    future::Table *t = qobject_cast<future::Table *>(sipCpp->parentAspect());
    if (t)
        sipRes = t->column(t->colX(t->indexOfChild(sipCpp)));
#line 930 "./sipqtiColumn.cpp"

            return sipConvertFromType(sipRes,sipType_Column,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_x, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Column_y(PyObject *, PyObject *);}
static PyObject *meth_Column_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Column *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Column, &sipCpp))
        {
             ::Column*sipRes = 0;

#line 221 "src/scripting/qti.sip"
    future::Table *t = qobject_cast<future::Table *>(sipCpp->parentAspect());
    if (t)
        sipRes = t->column(t->colY(t->indexOfChild(sipCpp)));
#line 959 "./sipqtiColumn.cpp"

            return sipConvertFromType(sipRes,sipType_Column,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Column, sipName_y, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Column(void *, const sipTypeDef *);}
static void *cast_Column(void *sipCppV, const sipTypeDef *targetType)
{
     ::Column *sipCpp = reinterpret_cast< ::Column *>(sipCppV);

    if (targetType == sipType_AbstractAspect)
        return static_cast< ::AbstractAspect *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Column(void *, int);}
static void release_Column(void *sipCppV, int)
{
     ::Column *sipCpp = reinterpret_cast< ::Column *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_Column(sipSimpleWrapper *);}
static void dealloc_Column(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Column(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Column[] = {{0, 255, 1}};


static PyMethodDef methods_Column[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_Column_clear, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_clearFormulas), meth_Column_clearFormulas, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_clearValidity), meth_Column_clearValidity, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_columnFormat), meth_Column_columnFormat, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_columnMode), meth_Column_columnMode, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_copy), meth_Column_copy, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_dateAt), meth_Column_dateAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_dateTimeAt), meth_Column_dateTimeAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_formula), meth_Column_formula, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_insertRows), meth_Column_insertRows, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isInvalid), meth_Column_isInvalid, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_plotDesignation), meth_Column_plotDesignation, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_removeRows), meth_Column_removeRows, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_replaceDateTimes), meth_Column_replaceDateTimes, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_replaceTexts), meth_Column_replaceTexts, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_replaceValues), meth_Column_replaceValues, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_Column_rowCount, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setColumnFormat), meth_Column_setColumnFormat, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setColumnMode), meth_Column_setColumnMode, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setDateAt), meth_Column_setDateAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setDateTimeAt), meth_Column_setDateTimeAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setFormula), meth_Column_setFormula, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setInvalid), meth_Column_setInvalid, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setPlotDesignation), meth_Column_setPlotDesignation, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setTextAt), meth_Column_setTextAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setTimeAt), meth_Column_setTimeAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setValueAt), meth_Column_setValueAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_textAt), meth_Column_textAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_timeAt), meth_Column_timeAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_valueAt), meth_Column_valueAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_x), meth_Column_x, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_y), meth_Column_y, METH_VARARGS, SIP_NULLPTR}
};


static pyqt4ClassPluginDef plugin_Column = {
    & ::Column::staticMetaObject,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_Column = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Column,
        {SIP_NULLPTR},
        &plugin_Column
    },
    {
        sipNameNr_Column,
        {0, 0, 1},
        32, methods_Column,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_Column,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Column,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_Column,
    cast_Column,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
