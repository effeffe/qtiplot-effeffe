/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 493 "src/scripting/qti.sip"
#include "src/Matrix.h"
#define CHECK_MATRIX_COL(arg)\
	int col = arg-1;\
   if (col < 0 || col >= sipCpp->numCols()) {\
		sipIsErr = 1;\
		PyErr_Format(PyExc_ValueError, "There's no column %d in matrix %s!", col+1, sipCpp->objectName().toUtf8().constData());\
	}
#define CHECK_MATRIX_ROW(arg)\
   int row = arg-1;\
	if (row < 0 || row >= sipCpp->numRows()) {\
		sipIsErr = 1;\
		PyErr_Format(PyExc_ValueError, "There's no row %d in matrix %s!", row+1, sipCpp->objectName().toUtf8().constData());\
	}
#line 24 "./sipqtiMatrix.cpp"

#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 28 "./sipqtiMatrix.cpp"
#line 199 "/usr/share/sip/PyQt4/QtCore/qvector.sip"
#include <qvector.h>
#line 31 "./sipqtiMatrix.cpp"
#line 1947 "src/scripting/qti.sip"
#include "src/Folder.h"
#line 34 "./sipqtiMatrix.cpp"
#line 249 "src/scripting/qti.sip"
#include "src/MyWidget.h"
#include "src/ApplicationWindow.h"
#line 38 "./sipqtiMatrix.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 41 "./sipqtiMatrix.cpp"
#line 505 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 44 "./sipqtiMatrix.cpp"
#line 618 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 47 "./sipqtiMatrix.cpp"
#line 474 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "./sipqtiMatrix.cpp"
#line 252 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "./sipqtiMatrix.cpp"
#line 524 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "./sipqtiMatrix.cpp"
#line 548 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "./sipqtiMatrix.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "./sipqtiMatrix.cpp"
#line 561 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "./sipqtiMatrix.cpp"
#line 574 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 71 "./sipqtiMatrix.cpp"
#line 607 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "./sipqtiMatrix.cpp"
#line 596 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "./sipqtiMatrix.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 80 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qmdiarea.sip"
#include <qmdiarea.h>
#line 86 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qmenu.sip"
#include <qmenu.h>
#line 89 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qmdisubwindow.sip"
#include <qmdisubwindow.h>
#line 92 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 95 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 98 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 101 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmargins.sip"
#include <qmargins.h>
#line 104 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 107 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 110 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 113 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 116 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qlocale.sip"
#include <qlocale.h>
#line 119 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 122 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qpoint.sip"
#include <qpoint.h>
#line 125 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qregion.sip"
#include <qregion.h>
#line 128 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 131 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 134 "./sipqtiMatrix.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 137 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 140 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 143 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 146 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 149 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 152 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpalette.sip"
#include <qpalette.h>
#line 155 "./sipqtiMatrix.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 158 "./sipqtiMatrix.cpp"
#line 647 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "./sipqtiMatrix.cpp"
#line 739 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "./sipqtiMatrix.cpp"
#line 792 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "./sipqtiMatrix.cpp"
#line 765 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "./sipqtiMatrix.cpp"
#line 781 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "./sipqtiMatrix.cpp"
#line 854 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "./sipqtiMatrix.cpp"
#line 403 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "./sipqtiMatrix.cpp"
#line 347 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 182 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 185 "./sipqtiMatrix.cpp"
#line 52 "/usr/share/sip/PyQt4/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 188 "./sipqtiMatrix.cpp"
#line 34 "/usr/share/sip/PyQt4/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 191 "./sipqtiMatrix.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 194 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qaction.sip"
#include <qaction.h>
#line 197 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qlayout.sip"
#include <qlayout.h>
#line 200 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 203 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 206 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qcursor.sip"
#include <qcursor.h>
#line 209 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qicon.sip"
#include <qicon.h>
#line 212 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 215 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qstyle.sip"
#include <qstyle.h>
#line 218 "./sipqtiMatrix.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 221 "./sipqtiMatrix.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 224 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 227 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 230 "./sipqtiMatrix.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 233 "./sipqtiMatrix.cpp"


extern "C" {static PyObject *meth_Matrix_numRows(PyObject *, PyObject *);}
static PyObject *meth_Matrix_numRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->numRows();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_numRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setNumRows(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setNumRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Matrix, &sipCpp, &a0))
        {
            sipCpp->setNumRows(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setNumRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_numCols(PyObject *, PyObject *);}
static PyObject *meth_Matrix_numCols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->numCols();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_numCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setNumCols(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setNumCols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Matrix, &sipCpp, &a0))
        {
            sipCpp->setNumCols(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setNumCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setDimensions(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setDimensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1))
        {
            sipCpp->setDimensions(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setDimensions, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_text(PyObject *, PyObject *);}
static PyObject *meth_Matrix_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 516 "src/scripting/qti.sip"
	sipIsErr = 0;
	CHECK_MATRIX_ROW(a0);
	CHECK_MATRIX_COL(a1);
	if (sipIsErr == 0)
		sipRes = PYUNICODE_FromString(sipCpp->text(row, col).toUtf8().constData());
#line 383 "./sipqtiMatrix.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_text, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_cell(PyObject *, PyObject *);}
static PyObject *meth_Matrix_cell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1))
        {
            double sipRes = 0;
            int sipIsErr = 0;

#line 524 "src/scripting/qti.sip"
	sipIsErr = 0;
	CHECK_MATRIX_ROW(a0);
	CHECK_MATRIX_COL(a1);
	if (sipIsErr == 0)
		sipRes = sipCpp->cell(row, col);
#line 420 "./sipqtiMatrix.cpp"

            if (sipIsErr)
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_cell, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setText(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            int sipIsErr = 0;

#line 532 "src/scripting/qti.sip"
	sipIsErr = 0;
	CHECK_MATRIX_ROW(a0);
	CHECK_MATRIX_COL(a1);
	if (sipIsErr == 0)
		sipCpp->setText(row, col, *a2);
#line 458 "./sipqtiMatrix.cpp"
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setCell(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        double a2;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biid", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1, &a2))
        {
            int sipIsErr = 0;

#line 540 "src/scripting/qti.sip"
	sipIsErr = 0;
	CHECK_MATRIX_ROW(a0);
	CHECK_MATRIX_COL(a1);
	if (sipIsErr == 0)
		sipCpp->setCell(row, col, a2);
#line 497 "./sipqtiMatrix.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setCell, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_column(PyObject *, PyObject *);}
static PyObject *meth_Matrix_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1, &a2))
        {
             ::QVector< ::qreal>*sipRes = 0;

#line 549 "src/scripting/qti.sip"
	sipRes = new QVector<qreal>(sipCpp->d_future_matrix->columnCells(a0, a1, a2));
#line 531 "./sipqtiMatrix.cpp"

            return sipConvertFromNewType(sipRes,sipType_QVector_2400,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_column, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setColumn(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QVector< ::qreal>* a2;
        int a2State = 0;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1, sipType_QVector_2400,&a2, &a2State))
        {
#line 553 "src/scripting/qti.sip"
	sipCpp->d_future_matrix->setColumnCells(a0, a1, a1+a2->size()-1, *a2);
#line 560 "./sipqtiMatrix.cpp"
            sipReleaseType(const_cast< ::QVector< ::qreal> *>(a2),sipType_QVector_2400,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_row(PyObject *, PyObject *);}
static PyObject *meth_Matrix_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1, &a2))
        {
             ::QVector< ::qreal>*sipRes = 0;

#line 557 "src/scripting/qti.sip"
	sipRes = new QVector<qreal>(sipCpp->d_future_matrix->rowCells(a0, a1, a2));
#line 592 "./sipqtiMatrix.cpp"

            return sipConvertFromNewType(sipRes,sipType_QVector_2400,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_row, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setRow(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QVector< ::qreal>* a2;
        int a2State = 0;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1, sipType_QVector_2400,&a2, &a2State))
        {
#line 561 "src/scripting/qti.sip"
	sipCpp->d_future_matrix->setRowCells(a0, a1, a1+a2->size()-1, *a2);
#line 621 "./sipqtiMatrix.cpp"
            sipReleaseType(const_cast< ::QVector< ::qreal> *>(a2),sipType_QVector_2400,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setRow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_xStart(PyObject *, PyObject *);}
static PyObject *meth_Matrix_xStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->xStart();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_xStart, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_xEnd(PyObject *, PyObject *);}
static PyObject *meth_Matrix_xEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->xEnd();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_xEnd, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_yStart(PyObject *, PyObject *);}
static PyObject *meth_Matrix_yStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->yStart();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_yStart, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_yEnd(PyObject *, PyObject *);}
static PyObject *meth_Matrix_yEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->yEnd();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_yEnd, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setCoordinates(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setCoordinates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        double a3;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_Matrix, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setCoordinates(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setCoordinates, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setFormula(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setFormula(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Matrix, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFormula(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setFormula, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_recalculate(PyObject *, PyObject *);}
static PyObject *meth_Matrix_recalculate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->recalculate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_recalculate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_setNumericPrecision(PyObject *, PyObject *);}
static PyObject *meth_Matrix_setNumericPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Matrix, &sipCpp, &a0))
        {
            sipCpp->setNumericPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_setNumericPrecision, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_transpose(PyObject *, PyObject *);}
static PyObject *meth_Matrix_transpose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            sipCpp->transpose();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_transpose, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_invert(PyObject *, PyObject *);}
static PyObject *meth_Matrix_invert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            sipCpp->invert();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_invert, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Matrix_determinant(PyObject *, PyObject *);}
static PyObject *meth_Matrix_determinant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Matrix, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->determinant();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Matrix, sipName_determinant, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Matrix(void *, const sipTypeDef *);}
static void *cast_Matrix(void *sipCppV, const sipTypeDef *targetType)
{
     ::Matrix *sipCpp = reinterpret_cast< ::Matrix *>(sipCppV);

    if (targetType == sipType_MyWidget)
        return static_cast< ::MyWidget *>(sipCpp);

    if (targetType == sipType_QMdiSubWindow)
        return static_cast< ::QMdiSubWindow *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Matrix(void *, int);}
static void release_Matrix(void *sipCppV, int)
{
     ::Matrix *sipCpp = reinterpret_cast< ::Matrix *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_Matrix(sipSimpleWrapper *);}
static void dealloc_Matrix(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Matrix(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Matrix[] = {{34, 255, 1}};


static PyMethodDef methods_Matrix[] = {
    {SIP_MLNAME_CAST(sipName_cell), meth_Matrix_cell, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_column), meth_Matrix_column, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_determinant), meth_Matrix_determinant, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_invert), meth_Matrix_invert, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_numCols), meth_Matrix_numCols, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_numRows), meth_Matrix_numRows, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_recalculate), meth_Matrix_recalculate, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_row), meth_Matrix_row, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setCell), meth_Matrix_setCell, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setColumn), meth_Matrix_setColumn, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setCoordinates), meth_Matrix_setCoordinates, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setDimensions), meth_Matrix_setDimensions, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setFormula), meth_Matrix_setFormula, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setNumCols), meth_Matrix_setNumCols, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setNumRows), meth_Matrix_setNumRows, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setNumericPrecision), meth_Matrix_setNumericPrecision, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setRow), meth_Matrix_setRow, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setText), meth_Matrix_setText, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_text), meth_Matrix_text, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_transpose), meth_Matrix_transpose, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xEnd), meth_Matrix_xEnd, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xStart), meth_Matrix_xStart, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_yEnd), meth_Matrix_yEnd, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_yStart), meth_Matrix_yStart, METH_VARARGS, SIP_NULLPTR}
};


static pyqt4ClassPluginDef plugin_Matrix = {
    & ::Matrix::staticMetaObject,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_Matrix = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Matrix,
        {SIP_NULLPTR},
        &plugin_Matrix
    },
    {
        sipNameNr_Matrix,
        {0, 0, 1},
        24, methods_Matrix,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_Matrix,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Matrix,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_Matrix,
    cast_Matrix,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
