/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 611 "src/scripting/qti.sip"
#include "src/ImageMarker.h"
#line 12 "./sipqtiImageMarker.cpp"

#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./sipqtiImageMarker.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 19 "./sipqtiImageMarker.cpp"


extern "C" {static PyObject *meth_ImageMarker_fileName(PyObject *, PyObject *);}
static PyObject *meth_ImageMarker_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ImageMarker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ImageMarker, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ImageMarker, sipName_fileName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ImageMarker_size(PyObject *, PyObject *);}
static PyObject *meth_ImageMarker_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ImageMarker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ImageMarker, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ImageMarker, sipName_size, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ImageMarker_setSize(PyObject *, PyObject *);}
static PyObject *meth_ImageMarker_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::ImageMarker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_ImageMarker, &sipCpp, &a0, &a1))
        {
            sipCpp->setSize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ImageMarker, sipName_setSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ImageMarker_setCoordinates(PyObject *, PyObject *);}
static PyObject *meth_ImageMarker_setCoordinates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        double a3;
         ::ImageMarker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_ImageMarker, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setBoundingRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ImageMarker, sipName_setCoordinates, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_ImageMarker(void *, int);}
static void release_ImageMarker(void *sipCppV, int)
{
    delete reinterpret_cast< ::ImageMarker *>(sipCppV);
}


extern "C" {static void dealloc_ImageMarker(sipSimpleWrapper *);}
static void dealloc_ImageMarker(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_ImageMarker(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_ImageMarker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_ImageMarker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::ImageMarker *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::ImageMarker(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_ImageMarker[] = {
    {SIP_MLNAME_CAST(sipName_fileName), meth_ImageMarker_fileName, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setCoordinates), meth_ImageMarker_setCoordinates, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setSize), meth_ImageMarker_setSize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_size), meth_ImageMarker_size, METH_VARARGS, SIP_NULLPTR}
};


static pyqt4ClassPluginDef plugin_ImageMarker = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_ImageMarker = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_ImageMarker,
        {SIP_NULLPTR},
        &plugin_ImageMarker
    },
    {
        sipNameNr_ImageMarker,
        {0, 0, 1},
        4, methods_ImageMarker,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_ImageMarker,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_ImageMarker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_ImageMarker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
