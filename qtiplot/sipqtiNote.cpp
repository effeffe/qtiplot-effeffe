/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 1141 "src/scripting/qti.sip"
#include "src/Note.h"
#line 12 "./sipqtiNote.cpp"

#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./sipqtiNote.cpp"
#line 1947 "src/scripting/qti.sip"
#include "src/Folder.h"
#line 19 "./sipqtiNote.cpp"
#line 249 "src/scripting/qti.sip"
#include "src/MyWidget.h"
#include "src/ApplicationWindow.h"
#line 23 "./sipqtiNote.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26 "./sipqtiNote.cpp"
#line 505 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "./sipqtiNote.cpp"
#line 618 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 32 "./sipqtiNote.cpp"
#line 474 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 35 "./sipqtiNote.cpp"
#line 252 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 38 "./sipqtiNote.cpp"
#line 524 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 41 "./sipqtiNote.cpp"
#line 548 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 44 "./sipqtiNote.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47 "./sipqtiNote.cpp"
#line 561 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 50 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "./sipqtiNote.cpp"
#line 574 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "./sipqtiNote.cpp"
#line 607 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "./sipqtiNote.cpp"
#line 596 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "./sipqtiNote.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 65 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qmdiarea.sip"
#include <qmdiarea.h>
#line 71 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qmenu.sip"
#include <qmenu.h>
#line 74 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qmdisubwindow.sip"
#include <qmdisubwindow.h>
#line 77 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 80 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 83 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmargins.sip"
#include <qmargins.h>
#line 89 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 98 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 101 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qlocale.sip"
#include <qlocale.h>
#line 104 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 107 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qpoint.sip"
#include <qpoint.h>
#line 110 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qregion.sip"
#include <qregion.h>
#line 113 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 116 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 119 "./sipqtiNote.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 122 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 125 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 128 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 131 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 134 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 137 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpalette.sip"
#include <qpalette.h>
#line 140 "./sipqtiNote.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 143 "./sipqtiNote.cpp"
#line 647 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "./sipqtiNote.cpp"
#line 739 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "./sipqtiNote.cpp"
#line 792 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "./sipqtiNote.cpp"
#line 765 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "./sipqtiNote.cpp"
#line 781 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "./sipqtiNote.cpp"
#line 854 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "./sipqtiNote.cpp"
#line 403 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "./sipqtiNote.cpp"
#line 347 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 170 "./sipqtiNote.cpp"
#line 52 "/usr/share/sip/PyQt4/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 173 "./sipqtiNote.cpp"
#line 34 "/usr/share/sip/PyQt4/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 176 "./sipqtiNote.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 179 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qaction.sip"
#include <qaction.h>
#line 182 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qlayout.sip"
#include <qlayout.h>
#line 185 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 188 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 191 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qcursor.sip"
#include <qcursor.h>
#line 194 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qicon.sip"
#include <qicon.h>
#line 197 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 200 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qstyle.sip"
#include <qstyle.h>
#line 203 "./sipqtiNote.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 206 "./sipqtiNote.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 209 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 212 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 215 "./sipqtiNote.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 218 "./sipqtiNote.cpp"


extern "C" {static PyObject *meth_Note_execute(PyObject *, PyObject *);}
static PyObject *meth_Note_execute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Note *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Note, &sipCpp))
        {
            sipCpp->execute();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Note, sipName_execute, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Note_executeAll(PyObject *, PyObject *);}
static PyObject *meth_Note_executeAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Note *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Note, &sipCpp))
        {
            sipCpp->executeAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Note, sipName_executeAll, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Note_autoexec(PyObject *, PyObject *);}
static PyObject *meth_Note_autoexec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Note *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Note, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoexec();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Note, sipName_autoexec, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Note_setAutoexec(PyObject *, PyObject *);}
static PyObject *meth_Note_setAutoexec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::Note *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Note, &sipCpp, &a0))
        {
            sipCpp->setAutoexec(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Note, sipName_setAutoexec, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Note_text(PyObject *, PyObject *);}
static PyObject *meth_Note_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Note *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Note, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Note, sipName_text, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Note_setText(PyObject *, PyObject *);}
static PyObject *meth_Note_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Note *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Note, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Note, sipName_setText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Note_exportASCII(PyObject *, PyObject *);}
static PyObject *meth_Note_exportASCII(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Note *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Note, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->exportASCII(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Note, sipName_exportASCII, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Note_importASCII(PyObject *, PyObject *);}
static PyObject *meth_Note_importASCII(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Note *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Note, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->importASCII(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Note, sipName_importASCII, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Note(void *, const sipTypeDef *);}
static void *cast_Note(void *sipCppV, const sipTypeDef *targetType)
{
     ::Note *sipCpp = reinterpret_cast< ::Note *>(sipCppV);

    if (targetType == sipType_MyWidget)
        return static_cast< ::MyWidget *>(sipCpp);

    if (targetType == sipType_QMdiSubWindow)
        return static_cast< ::QMdiSubWindow *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Note(void *, int);}
static void release_Note(void *sipCppV, int)
{
     ::Note *sipCpp = reinterpret_cast< ::Note *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_Note(sipSimpleWrapper *);}
static void dealloc_Note(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Note(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Note[] = {{34, 255, 1}};


static PyMethodDef methods_Note[] = {
    {SIP_MLNAME_CAST(sipName_autoexec), meth_Note_autoexec, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_execute), meth_Note_execute, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_executeAll), meth_Note_executeAll, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_exportASCII), meth_Note_exportASCII, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_importASCII), meth_Note_importASCII, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setAutoexec), meth_Note_setAutoexec, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setText), meth_Note_setText, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_text), meth_Note_text, METH_VARARGS, SIP_NULLPTR}
};


static pyqt4ClassPluginDef plugin_Note = {
    & ::Note::staticMetaObject,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_Note = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Note,
        {SIP_NULLPTR},
        &plugin_Note
    },
    {
        sipNameNr_Note,
        {0, 0, 1},
        8, methods_Note,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_Note,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Note,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_Note,
    cast_Note,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
