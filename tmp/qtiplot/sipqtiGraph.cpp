/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 908 "src/scripting/qti.sip"
#include "src/Graph.h"
#include "src/Legend.h"
#include "src/lib/include/ColorButton.h"
#include "src/FunctionCurve.h"
#include "src/DataPointPicker.h"
#include <qwt_plot_canvas.h>
#line 17 "../tmp/qtiplot/sipqtiGraph.cpp"

#line 110 "/usr/share/sip/PyQt4/QtCore/qpoint.sip"
#include <qpoint.h>
#line 21 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 24 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 27 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 210 "/usr/share/sip/PyQt4/QtGui/qprinter.sip"
#include <qprinter.h>
#line 30 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 846 "src/scripting/qti.sip"
#include "src/Grid.h"
#line 33 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 36 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 630 "src/scripting/qti.sip"
#include "src/Legend.h"
#line 39 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 611 "src/scripting/qti.sip"
#include "src/ImageMarker.h"
#line 42 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 586 "src/scripting/qti.sip"
#include "src/ArrowMarker.h"
#line 45 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 303 "src/scripting/qti.sip"
#include "src/Table.h"

#define CHECK_TABLE_COL(arg)\
    int col;\
    if (PYLong_Check(arg)) {\
      col = (int)PYLong_AsLong(arg) - 1;\
		if (col < 0 || col >= sipCpp->numCols()) {\
			sipIsErr = 1;\
			PyErr_Format(PyExc_ValueError, "There's no column %d in table %s!", col+1, sipCpp->objectName().toUtf8().constData());\
		}\
	 } else {\
      PyObject *tmp = PyObject_Str(arg);\
		if (!tmp) {\
			sipIsErr = 1;\
			PyErr_Format(PyExc_TypeError, "Column argument must be either int or string.");\
		} else {\
			col = sipCpp->colNames().indexOf(PYUNICODE_AsUTF8(tmp));\
			if (col < 0) {\
				sipIsErr = 1;\
				PyErr_Format(PyExc_ValueError, "There's no column named %s in table %s!", PYUNICODE_AsUTF8(tmp),\
						sipCpp->name().toUtf8().constData());\
				Py_DECREF(tmp);\
			}\
		}\
	 }
#define CHECK_TABLE_ROW(arg)\
   int row = arg-1;\
	if (row < 0 || row >= sipCpp->numRows()) {\
		sipIsErr = 1;\
		PyErr_Format(PyExc_ValueError, "There's no row %d in table %s!", row+1, sipCpp->objectName().toUtf8().constData());\
	}

#line 79 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 743 "src/scripting/qti.sip"
#include <qwt_plot_curve.h>
#include "Graph.h"
#line 83 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmargins.sip"
#include <qmargins.h>
#line 92 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 101 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 104 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qlocale.sip"
#include <qlocale.h>
#line 107 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 110 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qpoint.sip"
#include <qpoint.h>
#line 113 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qregion.sip"
#include <qregion.h>
#line 116 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 119 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 122 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 125 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 128 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 131 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 134 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 137 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 140 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 143 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpalette.sip"
#include <qpalette.h>
#line 146 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 149 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 647 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 155 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 607 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 596 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 739 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 792 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 765 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 781 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 854 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 403 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 618 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 182 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 574 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 185 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 561 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 188 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 548 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 191 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 524 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 194 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 505 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 197 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 474 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 200 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 347 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 203 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 252 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 206 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 209 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 52 "/usr/share/sip/PyQt4/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 212 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 34 "/usr/share/sip/PyQt4/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 215 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 218 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qaction.sip"
#include <qaction.h>
#line 221 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qlayout.sip"
#include <qlayout.h>
#line 224 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 227 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 230 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 233 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qcursor.sip"
#include <qcursor.h>
#line 236 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qicon.sip"
#include <qicon.h>
#line 239 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 242 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qstyle.sip"
#include <qstyle.h>
#line 245 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 248 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 251 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 254 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 257 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 260 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 263 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 266 "../tmp/qtiplot/sipqtiGraph.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 269 "../tmp/qtiplot/sipqtiGraph.cpp"


extern "C" {static PyObject *meth_Graph_isPiePlot(PyObject *, PyObject *);}
static PyObject *meth_Graph_isPiePlot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPiePlot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_isPiePlot, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_pieLegend(PyObject *, PyObject *);}
static PyObject *meth_Graph_pieLegend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 920 "src/scripting/qti.sip"
  sipRes = PYUNICODE_FromString(sipCpp->pieLegendText().toUtf8().constData());
#line 311 "../tmp/qtiplot/sipqtiGraph.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_pieLegend, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_insertCurve(PyObject *, PyObject *);}
static PyObject *meth_Graph_insertCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Table* a0;
        const  ::QString* a1;
        int a1State = 0;
        int a2 = 1;
        int a3 = -1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1|ii", &sipSelf, sipType_Graph, &sipCpp, sipType_Table, &a0, sipType_QString,&a1, &a1State, &a2, &a3))
        {
            bool sipRes = 0;

#line 925 "src/scripting/qti.sip"
	if (sipCpp->insertCurve(a0, *a1, a2)) {
		CurveLayout cl = sipCpp->initCurveLayout(a2, 1);
		if (a3 >= 0) {
			cl.lCol = a3;
			cl.symCol = a3;
			cl.fillCol = a3;
		}
		sipCpp->updateCurveLayout(sipCpp->curves()-1, &cl);
		sipRes = true;
	} else
		sipRes = false;
#line 353 "../tmp/qtiplot/sipqtiGraph.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::Table* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        int a3 = 1;
        int a4 = -1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1J1|ii", &sipSelf, sipType_Graph, &sipCpp, sipType_Table, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, &a4))
        {
            bool sipRes = 0;

#line 939 "src/scripting/qti.sip"
	if (sipCpp->insertCurve(a0, *a1, *a2, a3)) {
		CurveLayout cl = sipCpp->initCurveLayout(a3, 1);
		if (a4 >= 0) {
			cl.lCol = a4;
			cl.symCol = a4;
			cl.fillCol = a4;
		}
		sipCpp->updateCurveLayout(sipCpp->curves()-1, &cl);
		sipRes = true;
	} else
		sipRes = false;
#line 386 "../tmp/qtiplot/sipqtiGraph.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_insertCurve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_insertFunctionCurve(PyObject *, PyObject *);}
static PyObject *meth_Graph_insertFunctionCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        double a1 = 0;
        double a2 = 1;
        int a3 = 100;
        const  ::QString& a4def = QString::null;
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|ddiJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, &a3, sipType_QString,&a4, &a4State))
        {
            bool sipRes = 0;

#line 954 "src/scripting/qti.sip"
	ApplicationWindow *app = sipscidavis_app();
	if (app)
		sipRes = sipCpp->addFunctionCurve(app, FunctionCurve::Normal, QStringList() << *a0, "x",
				QList<double>() << a1 << a2, a3, *a4);
	else
		sipRes = false;
#line 428 "../tmp/qtiplot/sipqtiGraph.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_insertFunctionCurve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_insertPolarCurve(PyObject *, PyObject *);}
static PyObject *meth_Graph_insertPolarCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        double a2 = 0;
        double a3 = 2*M_PI;
        const  ::QString& a4def = "t";
        const  ::QString* a4 = &a4def;
        int a4State = 0;
        int a5 = 100;
        const  ::QString& a6def = QString::null;
        const  ::QString* a6 = &a6def;
        int a6State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1|ddJ1iJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2, &a3, sipType_QString,&a4, &a4State, &a5, sipType_QString,&a6, &a6State))
        {
            bool sipRes = 0;

#line 965 "src/scripting/qti.sip"
	ApplicationWindow *app = sipscidavis_app();
	if (app)
		sipRes = sipCpp->addFunctionCurve(app, FunctionCurve::Polar, QStringList() << *a0 << *a1,
				*a4, QList<double>() << a2 << a3, a5, *a6);
	else
		sipRes = false;
#line 475 "../tmp/qtiplot/sipqtiGraph.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a6),sipType_QString,a6State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_insertPolarCurve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_insertParametricCurve(PyObject *, PyObject *);}
static PyObject *meth_Graph_insertParametricCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        double a2 = 0;
        double a3 = 1;
        const  ::QString& a4def = "t";
        const  ::QString* a4 = &a4def;
        int a4State = 0;
        int a5 = 100;
        const  ::QString& a6def = QString::null;
        const  ::QString* a6 = &a6def;
        int a6State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1|ddJ1iJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2, &a3, sipType_QString,&a4, &a4State, &a5, sipType_QString,&a6, &a6State))
        {
            bool sipRes = 0;

#line 976 "src/scripting/qti.sip"
	ApplicationWindow *app = sipscidavis_app();
	if (app)
		sipRes = sipCpp->addFunctionCurve(app, FunctionCurve::Parametric, QStringList() << *a0 << *a1,
				*a4, QList<double>() << a2 << a3, a5, *a6);
	else
		sipRes = false;
#line 524 "../tmp/qtiplot/sipqtiGraph.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a6),sipType_QString,a6State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_insertParametricCurve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_removeCurve(PyObject *, PyObject *);}
static PyObject *meth_Graph_removeCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Graph, &sipCpp, &a0))
        {
            sipCpp->removeCurve(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeCurve(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_removeCurve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_deleteFitCurves(PyObject *, PyObject *);}
static PyObject *meth_Graph_deleteFitCurves(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            sipCpp->deleteFitCurves();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_deleteFitCurves, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_numCurves(PyObject *, PyObject *);}
static PyObject *meth_Graph_numCurves(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->curves();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_numCurves, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_curves(PyObject *, PyObject *);}
static PyObject *meth_Graph_curves(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            QList< ::QwtPlotCurve*>*sipRes = 0;

#line 990 "src/scripting/qti.sip"
	sipRes = new QList<QwtPlotCurve*>();
	for (int i = 0; i<sipCpp->curves(); i++)
		sipRes->append(sipCpp->curve(i));
#line 646 "../tmp/qtiplot/sipqtiGraph.cpp"

            return sipConvertFromNewType(sipRes,sipType_QList_0101QwtPlotCurve,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_curves, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_showCurve(PyObject *, PyObject *);}
static PyObject *meth_Graph_showCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        bool a1 = 1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|b", &sipSelf, sipType_Graph, &sipCpp, &a0, &a1))
        {
            sipCpp->showCurve(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_showCurve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_curve(PyObject *, PyObject *);}
static PyObject *meth_Graph_curve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Graph, &sipCpp, &a0))
        {
             ::QwtPlotCurve*sipRes;

            sipRes = sipCpp->curve(a0);

            return sipConvertFromType(sipRes,sipType_QwtPlotCurve,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QwtPlotCurve*sipRes;

            sipRes = sipCpp->curve(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QwtPlotCurve,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_curve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_addErrorBars(PyObject *, PyObject *);}
static PyObject *meth_Graph_addErrorBars(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Table* a1;
        const  ::QString* a2;
        int a2State = 0;
        int a3 = 1;
        int a4 = 1;
        int a5 = 8;
        const  ::QColor& a6def = QColor(Qt::black);
        const  ::QColor* a6 = &a6def;
        int a6State = 0;
        bool a7 = 1;
        bool a8 = 1;
        bool a9 = 1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8J1|iiiJ1bbb", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State, sipType_Table, &a1, sipType_QString,&a2, &a2State, &a3, &a4, &a5, sipType_QColor, &a6, &a6State, &a7, &a8, &a9))
        {
            sipCpp->addErrorBars(*a0,a1,*a2,a3,a4,a5,*a6,a7,a8,a9);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QColor *>(a6),sipType_QColor,a6State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_addErrorBars, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_addArrow(PyObject *, PyObject *);}
static PyObject *meth_Graph_addArrow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ArrowMarker* a0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_Graph, &sipCpp, sipType_ArrowMarker, &a0))
        {
            sipCpp->addArrow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_addArrow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_addImage(PyObject *, PyObject *);}
static PyObject *meth_Graph_addImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ImageMarker* a0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_Graph, &sipCpp, sipType_ImageMarker, &a0))
        {
             ::ImageMarker*sipRes;

            sipRes = sipCpp->addImage(a0);

            return sipConvertFromType(sipRes,sipType_ImageMarker,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::ImageMarker*sipRes;

            sipRes = sipCpp->addImage(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_ImageMarker,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_addImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setTitle(PyObject *, PyObject *);}
static PyObject *meth_Graph_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_newLegend(PyObject *, PyObject *);}
static PyObject *meth_Graph_newLegend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
             ::Legend*sipRes;

            sipRes = sipCpp->newLegend();

            return sipConvertFromType(sipRes,sipType_Legend,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::Legend*sipRes;

            sipRes = sipCpp->newLegend(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_Legend,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_newLegend, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setLegend(PyObject *, PyObject *);}
static PyObject *meth_Graph_setLegend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
#line 1013 "src/scripting/qti.sip"
  sipCpp->legend()->setText(*a0);
#line 917 "../tmp/qtiplot/sipqtiGraph.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setLegend, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_legend(PyObject *, PyObject *);}
static PyObject *meth_Graph_legend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
             ::Legend*sipRes;

            sipRes = sipCpp->legend();

            return sipConvertFromType(sipRes,sipType_Legend,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_legend, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_removeLegend(PyObject *, PyObject *);}
static PyObject *meth_Graph_removeLegend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            sipCpp->removeLegend();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_removeLegend, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_addTimeStamp(PyObject *, PyObject *);}
static PyObject *meth_Graph_addTimeStamp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            sipCpp->addTimeStamp();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_addTimeStamp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_enableAxis(PyObject *, PyObject *);}
static PyObject *meth_Graph_enableAxis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        bool a1 = 1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|b", &sipSelf, sipType_Graph, &sipCpp, &a0, &a1))
        {
            sipCpp->enableAxis(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_enableAxis, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setXTitle(PyObject *, PyObject *);}
static PyObject *meth_Graph_setXTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setXAxisTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setXTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setYTitle(PyObject *, PyObject *);}
static PyObject *meth_Graph_setYTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setYAxisTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setYTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setRightTitle(PyObject *, PyObject *);}
static PyObject *meth_Graph_setRightTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setRightAxisTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setRightTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setTopTitle(PyObject *, PyObject *);}
static PyObject *meth_Graph_setTopTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTopAxisTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setTopTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setAxisNumericFormat(PyObject *, PyObject *);}
static PyObject *meth_Graph_setAxisNumericFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2 = 6;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii|iJ1", &sipSelf, sipType_Graph, &sipCpp, &a0, &a1, &a2, sipType_QString,&a3, &a3State))
        {
            sipCpp->setLabelsNumericFormat(a0,a1,a2,*a3);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setAxisNumericFormat, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setScale(PyObject *, PyObject *);}
static PyObject *meth_Graph_setScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        double a1;
        double a2;
        double a3 = 0;
        int a4 = 5;
        int a5 = 5;
        int a6 = 0;
        bool a7 = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bidd|diiib", &sipSelf, sipType_Graph, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipCpp->setScale(a0,a1,a2,a3,a4,a5,a6,a7);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setMargin(PyObject *, PyObject *);}
static PyObject *meth_Graph_setMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Graph, &sipCpp, &a0))
        {
            sipCpp->setMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setFrame(PyObject *, PyObject *);}
static PyObject *meth_Graph_setFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
        const  ::QColor& a1def = QColor(Qt::black);
        const  ::QColor* a1 = &a1def;
        int a1State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|iJ1", &sipSelf, sipType_Graph, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setFrame(a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setFrame, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_Graph_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setBackgroundColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setBackgroundColor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setCanvasColor(PyObject *, PyObject *);}
static PyObject *meth_Graph_setCanvasColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setCanvasBackground(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setCanvasColor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_showGrid(PyObject *, PyObject *);}
static PyObject *meth_Graph_showGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Graph, &sipCpp, &a0))
        {
            sipCpp->showGrid(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            sipCpp->showGrid();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_showGrid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_grid(PyObject *, PyObject *);}
static PyObject *meth_Graph_grid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
             ::Grid*sipRes;

            sipRes = sipCpp->grid();

            return sipConvertFromType(sipRes,sipType_Grid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_grid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_replot(PyObject *, PyObject *);}
static PyObject *meth_Graph_replot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            sipCpp->replot();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_replot, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_printDialog(PyObject *, PyObject *);}
static PyObject *meth_Graph_printDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
            sipCpp->print();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_printDialog, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_exportImage(PyObject *, PyObject *);}
static PyObject *meth_Graph_exportImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|i", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->exportImage(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_exportImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_exportVector(PyObject *, PyObject *);}
static PyObject *meth_Graph_exportVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
        bool a2 = 1;
        bool a3 = 1;
         ::QPrinter::PaperSize a4 = QPrinter::Custom;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|ibbE", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, &a3, sipType_QPrinter_PageSize, &a4))
        {
            sipCpp->exportVector(*a0,a1,a2,a3,a4);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_exportVector, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_export(PyObject *, PyObject *);}
static PyObject *meth_Graph_export(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Graph, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->exportToFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_export, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_enableAutoscaling(PyObject *, PyObject *);}
static PyObject *meth_Graph_enableAutoscaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_Graph, &sipCpp, &a0))
        {
            sipCpp->enableAutoscaling(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_enableAutoscaling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setIgnoreResize(PyObject *, PyObject *);}
static PyObject *meth_Graph_setIgnoreResize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_Graph, &sipCpp, &a0))
        {
            sipCpp->setIgnoreResizeEvents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setIgnoreResize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setAutoscaleFonts(PyObject *, PyObject *);}
static PyObject *meth_Graph_setAutoscaleFonts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_Graph, &sipCpp, &a0))
        {
            sipCpp->setAutoscaleFonts(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setAutoscaleFonts, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_Graph_setAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
        bool a1 = 1;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|bb", &sipSelf, sipType_Graph, &sipCpp, &a0, &a1))
        {
            sipCpp->setAntialiasing(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setAntialiasing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_setCurveAxes(PyObject *, PyObject *);}
static PyObject *meth_Graph_setCurveAxes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
         ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_Graph, &sipCpp, &a0, &a1, &a2))
        {
            int sipIsErr = 0;

#line 1054 "src/scripting/qti.sip"
	sipIsErr = 0;
	if ((a1 > 3) || (a1 < 2) || (a2 > 1) || (a2 < 0))
    {
         sipIsErr=1;
         PyErr_Format(PyExc_ValueError, "Invalid axis attachment!");\
    }
	if (a0>=sipCpp->curves())
	{
         sipIsErr=1;
         PyErr_Format(PyExc_ValueError, "Invalid curve index! is %d, should be less than %d",a0,sipCpp->curves());\
	}
	if (sipIsErr == 0)
	{
        QwtPlotItem* pItem;
		pItem = sipCpp->plotItem(a0);
		pItem->setAxis(a1, a2);
		sipCpp->setAutoScale();
	}
#line 1641 "../tmp/qtiplot/sipqtiGraph.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_setCurveAxes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_canvas(PyObject *, PyObject *);}
static PyObject *meth_Graph_canvas(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
             ::QWidget*sipRes = 0;

#line 1076 "src/scripting/qti.sip"
	sipRes = sipCpp->d_plot->canvas();
#line 1672 "../tmp/qtiplot/sipqtiGraph.cpp"

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_canvas, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Graph_pickPoint(PyObject *, PyObject *);}
static PyObject *meth_Graph_pickPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Graph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Graph, &sipCpp))
        {
             ::QPointF*sipRes = 0;

#line 1081 "src/scripting/qti.sip"
	ApplicationWindow *app = sipscidavis_app();
	sipRes = new QPointF();
	if (app)
		*sipRes = DataPointPicker(const_cast<Graph*>(sipCpp), app).pick();
#line 1702 "../tmp/qtiplot/sipqtiGraph.cpp"

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Layer, sipName_pickPoint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Graph(void *, const sipTypeDef *);}
static void *cast_Graph(void *sipCppV, const sipTypeDef *targetType)
{
     ::Graph *sipCpp = reinterpret_cast< ::Graph *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Graph(void *, int);}
static void release_Graph(void *sipCppV, int)
{
     ::Graph *sipCpp = reinterpret_cast< ::Graph *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_Graph(sipSimpleWrapper *);}
static void dealloc_Graph(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Graph(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Graph[] = {{35, 1, 1}};


static PyMethodDef methods_Graph[] = {
    {SIP_MLNAME_CAST(sipName_addArrow), meth_Graph_addArrow, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_addErrorBars), meth_Graph_addErrorBars, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_addImage), meth_Graph_addImage, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_addTimeStamp), meth_Graph_addTimeStamp, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_canvas), meth_Graph_canvas, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_curve), meth_Graph_curve, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_curves), meth_Graph_curves, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_deleteFitCurves), meth_Graph_deleteFitCurves, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_enableAutoscaling), meth_Graph_enableAutoscaling, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_enableAxis), meth_Graph_enableAxis, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_export), meth_Graph_export, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_exportImage), meth_Graph_exportImage, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_exportVector), meth_Graph_exportVector, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_grid), meth_Graph_grid, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_insertCurve), meth_Graph_insertCurve, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_insertFunctionCurve), meth_Graph_insertFunctionCurve, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_insertParametricCurve), meth_Graph_insertParametricCurve, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_insertPolarCurve), meth_Graph_insertPolarCurve, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isPiePlot), meth_Graph_isPiePlot, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_legend), meth_Graph_legend, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_newLegend), meth_Graph_newLegend, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_numCurves), meth_Graph_numCurves, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_pickPoint), meth_Graph_pickPoint, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_pieLegend), meth_Graph_pieLegend, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_printDialog), meth_Graph_printDialog, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_removeCurve), meth_Graph_removeCurve, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_removeLegend), meth_Graph_removeLegend, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_replot), meth_Graph_replot, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setAntialiasing), meth_Graph_setAntialiasing, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setAutoscaleFonts), meth_Graph_setAutoscaleFonts, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setAxisNumericFormat), meth_Graph_setAxisNumericFormat, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_Graph_setBackgroundColor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setCanvasColor), meth_Graph_setCanvasColor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setCurveAxes), meth_Graph_setCurveAxes, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setFrame), meth_Graph_setFrame, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setIgnoreResize), meth_Graph_setIgnoreResize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setLegend), meth_Graph_setLegend, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setMargin), meth_Graph_setMargin, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setRightTitle), meth_Graph_setRightTitle, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setScale), meth_Graph_setScale, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setTitle), meth_Graph_setTitle, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setTopTitle), meth_Graph_setTopTitle, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setXTitle), meth_Graph_setXTitle, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setYTitle), meth_Graph_setYTitle, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_showCurve), meth_Graph_showCurve, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_showGrid), meth_Graph_showGrid, METH_VARARGS, SIP_NULLPTR}
};

static sipEnumMemberDef enummembers_Graph[] = {
    {sipName_Bottom, static_cast<int>( ::Graph::Bottom), 20},
    {sipName_Left, static_cast<int>( ::Graph::Left), 20},
    {sipName_Right, static_cast<int>( ::Graph::Right), 20},
    {sipName_Top, static_cast<int>( ::Graph::Top), 20},
};


static pyqt4ClassPluginDef plugin_Graph = {
    & ::Graph::staticMetaObject,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_Graph = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Graph,
        {SIP_NULLPTR},
        &plugin_Graph
    },
    {
        sipNameNr_Layer,
        {0, 0, 1},
        46, methods_Graph,
        4, enummembers_Graph,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_Graph,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Graph,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_Graph,
    cast_Graph,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
