/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 846 "src/scripting/qti.sip"
#include "src/Grid.h"
#line 12 "../tmp/qtiplot/sipqtiGrid.cpp"

#line 26 "/usr/share/sip/PyQt4/QtGui/qpen.sip"
#include <qpen.h>
#line 16 "../tmp/qtiplot/sipqtiGrid.cpp"


extern "C" {static PyObject *meth_Grid_setXMajor(PyObject *, PyObject *);}
static PyObject *meth_Grid_setXMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Grid, &sipCpp, &a0))
        {
            sipCpp->enableX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setXMajor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_xMajor(PyObject *, PyObject *);}
static PyObject *meth_Grid_xMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->xEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_xMajor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setYMajor(PyObject *, PyObject *);}
static PyObject *meth_Grid_setYMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Grid, &sipCpp, &a0))
        {
            sipCpp->enableY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setYMajor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_yMajor(PyObject *, PyObject *);}
static PyObject *meth_Grid_yMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->yEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_yMajor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setXMinor(PyObject *, PyObject *);}
static PyObject *meth_Grid_setXMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Grid, &sipCpp, &a0))
        {
            sipCpp->enableXMin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setXMinor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_xMinor(PyObject *, PyObject *);}
static PyObject *meth_Grid_xMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->xMinEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_xMinor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setYMinor(PyObject *, PyObject *);}
static PyObject *meth_Grid_setYMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Grid, &sipCpp, &a0))
        {
            sipCpp->enableYMin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setYMinor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_yMinor(PyObject *, PyObject *);}
static PyObject *meth_Grid_yMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->yMinEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_yMinor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setXZeroLine(PyObject *, PyObject *);}
static PyObject *meth_Grid_setXZeroLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_Grid, &sipCpp, &a0))
        {
            sipCpp->enableZeroLineX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setXZeroLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_xZeroLine(PyObject *, PyObject *);}
static PyObject *meth_Grid_xZeroLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->xZeroLineEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_xZeroLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setYZeroLine(PyObject *, PyObject *);}
static PyObject *meth_Grid_setYZeroLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_Grid, &sipCpp, &a0))
        {
            sipCpp->enableZeroLineY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setYZeroLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_yZeroLine(PyObject *, PyObject *);}
static PyObject *meth_Grid_yZeroLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->yZeroLineEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_yZeroLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setXMajorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_setXMajorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Grid, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setMajPenX(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setXMajorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_xMajorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_xMajorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->majPenX());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_xMajorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setXMinorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_setXMinorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Grid, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setMinPenX(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setXMinorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_xMinorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_xMinorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->minPenX());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_xMinorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setYMajorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_setYMajorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Grid, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setMajPenY(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setYMajorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_yMajorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_yMajorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->majPenY());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_yMajorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setYMinorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_setYMinorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Grid, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setMinPenY(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setYMinorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_yMinorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_yMinorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Grid, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->minPenY());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_yMinorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setMajor(PyObject *, PyObject *);}
static PyObject *meth_Grid_setMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Grid, &sipCpp, &a0))
        {
#line 881 "src/scripting/qti.sip"
	sipCpp->enableX(a0);
	sipCpp->enableY(a0);
#line 541 "../tmp/qtiplot/sipqtiGrid.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setMajor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setMinor(PyObject *, PyObject *);}
static PyObject *meth_Grid_setMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Grid, &sipCpp, &a0))
        {
#line 887 "src/scripting/qti.sip"
	sipCpp->enableXMin(a0);
	sipCpp->enableYMin(a0);
#line 569 "../tmp/qtiplot/sipqtiGrid.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setMinor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setMajorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_setMajorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Grid, &sipCpp, sipType_QPen, &a0, &a0State))
        {
#line 893 "src/scripting/qti.sip"
	sipCpp->setMajPenX(*a0);
	sipCpp->setMajPenY(*a0);
#line 598 "../tmp/qtiplot/sipqtiGrid.cpp"
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setMajorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_Grid_setMinorPen(PyObject *, PyObject *);}
static PyObject *meth_Grid_setMinorPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::Grid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Grid, &sipCpp, sipType_QPen, &a0, &a0State))
        {
#line 898 "src/scripting/qti.sip"
	sipCpp->setMinPenX(*a0);
	sipCpp->setMinPenY(*a0);
#line 628 "../tmp/qtiplot/sipqtiGrid.cpp"
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Grid, sipName_setMinorPen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_Grid(void *, int);}
static void release_Grid(void *sipCppV, int)
{
    delete reinterpret_cast< ::Grid *>(sipCppV);
}


extern "C" {static void dealloc_Grid(sipSimpleWrapper *);}
static void dealloc_Grid(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Grid(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_Grid[] = {
    {SIP_MLNAME_CAST(sipName_setMajor), meth_Grid_setMajor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setMajorPen), meth_Grid_setMajorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setMinor), meth_Grid_setMinor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setMinorPen), meth_Grid_setMinorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setXMajor), meth_Grid_setXMajor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setXMajorPen), meth_Grid_setXMajorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setXMinor), meth_Grid_setXMinor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setXMinorPen), meth_Grid_setXMinorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setXZeroLine), meth_Grid_setXZeroLine, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setYMajor), meth_Grid_setYMajor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setYMajorPen), meth_Grid_setYMajorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setYMinor), meth_Grid_setYMinor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setYMinorPen), meth_Grid_setYMinorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setYZeroLine), meth_Grid_setYZeroLine, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xMajor), meth_Grid_xMajor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xMajorPen), meth_Grid_xMajorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xMinor), meth_Grid_xMinor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xMinorPen), meth_Grid_xMinorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_xZeroLine), meth_Grid_xZeroLine, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_yMajor), meth_Grid_yMajor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_yMajorPen), meth_Grid_yMajorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_yMinor), meth_Grid_yMinor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_yMinorPen), meth_Grid_yMinorPen, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_yZeroLine), meth_Grid_yZeroLine, METH_VARARGS, SIP_NULLPTR}
};


static pyqt4ClassPluginDef plugin_Grid = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_Grid = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_Grid,
        {SIP_NULLPTR},
        &plugin_Grid
    },
    {
        sipNameNr_Grid,
        {0, 0, 1},
        24, methods_Grid,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Grid,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_Grid,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
