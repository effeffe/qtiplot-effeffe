/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 249 "src/scripting/qti.sip"
#include "src/MyWidget.h"
#include "src/core/ApplicationWindow.h"
#line 13 "../tmp/qtiplot/sipqtiMyWidget.cpp"

#line 1947 "src/scripting/qti.sip"
#include "src/Folder.h"
#line 17 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 20 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 23 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 505 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 26 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 618 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 474 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 32 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 252 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 35 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 524 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 38 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 548 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 41 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 561 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 47 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 50 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 574 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 53 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 607 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 596 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 62 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qmdiarea.sip"
#include <qmdiarea.h>
#line 68 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qmenu.sip"
#include <qmenu.h>
#line 71 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qmdisubwindow.sip"
#include <qmdisubwindow.h>
#line 74 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 77 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 80 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmargins.sip"
#include <qmargins.h>
#line 86 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 95 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 98 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qlocale.sip"
#include <qlocale.h>
#line 101 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 104 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qpoint.sip"
#include <qpoint.h>
#line 107 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qregion.sip"
#include <qregion.h>
#line 110 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 113 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 116 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 119 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 122 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 125 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 128 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 131 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 134 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpalette.sip"
#include <qpalette.h>
#line 137 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 140 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 647 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 739 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 792 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 765 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 781 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 854 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 403 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 347 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 167 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 52 "/usr/share/sip/PyQt4/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 170 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 34 "/usr/share/sip/PyQt4/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 173 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 176 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qaction.sip"
#include <qaction.h>
#line 179 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qlayout.sip"
#include <qlayout.h>
#line 182 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 185 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 188 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qcursor.sip"
#include <qcursor.h>
#line 191 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qicon.sip"
#include <qicon.h>
#line 194 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 197 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qstyle.sip"
#include <qstyle.h>
#line 200 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 203 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 206 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 209 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 212 "../tmp/qtiplot/sipqtiMyWidget.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 215 "../tmp/qtiplot/sipqtiMyWidget.cpp"


extern "C" {static PyObject *meth_MyWidget_windowLabel(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_windowLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MyWidget, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 257 "src/scripting/qti.sip"
  sipRes = PYUNICODE_FromString(sipCpp->windowLabel().toUtf8().constData());
#line 232 "../tmp/qtiplot/sipqtiMyWidget.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_windowLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MyWidget_setWindowLabel(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_setWindowLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MyWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWindowLabel(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_setWindowLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MyWidget_name(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MyWidget, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_name, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MyWidget_setName(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MyWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
#line 264 "src/scripting/qti.sip"
	ApplicationWindow *app = sipscidavis_app();
	if (app) app->renameWindow(sipCpp, *a0);
#line 312 "../tmp/qtiplot/sipqtiMyWidget.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_setName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MyWidget_clone(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MyWidget, &sipCpp))
        {
             ::MyWidget*sipRes = 0;

#line 270 "src/scripting/qti.sip"
	ApplicationWindow *app = sipscidavis_app();
	if (app) sipRes = app->clone(sipCpp);
#line 342 "../tmp/qtiplot/sipqtiMyWidget.cpp"

            return sipConvertFromType(sipRes,sipType_MyWidget,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_clone, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MyWidget_captionPolicy(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_captionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MyWidget, &sipCpp))
        {
             ::MyWidget::CaptionPolicy sipRes;

            sipRes = sipCpp->captionPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_MyWidget_CaptionPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_captionPolicy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MyWidget_setCaptionPolicy(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_setCaptionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MyWidget::CaptionPolicy a0;
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_MyWidget, &sipCpp, sipType_MyWidget_CaptionPolicy, &a0))
        {
            sipCpp->setCaptionPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_setCaptionPolicy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MyWidget_folder(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_folder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MyWidget, &sipCpp))
        {
             ::Folder*sipRes;

            sipRes = sipCpp->folder();

            return sipConvertFromType(sipRes,sipType_Folder,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_folder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MyWidget_confirmClose(PyObject *, PyObject *);}
static PyObject *meth_MyWidget_confirmClose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::MyWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_MyWidget, &sipCpp, &a0))
        {
            sipCpp->askOnCloseEvent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MDIWindow, sipName_confirmClose, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_MyWidget(void *, const sipTypeDef *);}
static void *cast_MyWidget(void *sipCppV, const sipTypeDef *targetType)
{
     ::MyWidget *sipCpp = reinterpret_cast< ::MyWidget *>(sipCppV);

    if (targetType == sipType_QMdiSubWindow)
        return static_cast< ::QMdiSubWindow *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_MyWidget(void *, int);}
static void release_MyWidget(void *sipCppV, int)
{
     ::MyWidget *sipCpp = reinterpret_cast< ::MyWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_MyWidget(sipSimpleWrapper *);}
static void dealloc_MyWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_MyWidget(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_MyWidget[] = {{19, 1, 1}};


static PyMethodDef methods_MyWidget[] = {
    {SIP_MLNAME_CAST(sipName_captionPolicy), meth_MyWidget_captionPolicy, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_clone), meth_MyWidget_clone, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_confirmClose), meth_MyWidget_confirmClose, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_folder), meth_MyWidget_folder, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_name), meth_MyWidget_name, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setCaptionPolicy), meth_MyWidget_setCaptionPolicy, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setName), meth_MyWidget_setName, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setWindowLabel), meth_MyWidget_setWindowLabel, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_windowLabel), meth_MyWidget_windowLabel, METH_VARARGS, SIP_NULLPTR}
};

static sipEnumMemberDef enummembers_MyWidget[] = {
    {sipName_Both, static_cast<int>( ::MyWidget::Both), 35},
    {sipName_Label, static_cast<int>( ::MyWidget::Label), 35},
    {sipName_Name, static_cast<int>( ::MyWidget::Name), 35},
};


static pyqt4ClassPluginDef plugin_MyWidget = {
    & ::MyWidget::staticMetaObject,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_MyWidget = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_MyWidget,
        {SIP_NULLPTR},
        &plugin_MyWidget
    },
    {
        sipNameNr_MDIWindow,
        {0, 0, 1},
        9, methods_MyWidget,
        3, enummembers_MyWidget,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_MyWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_MyWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_MyWidget,
    cast_MyWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
