/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 1094 "src/scripting/qti.sip"
#include "src/MultiLayer.h"
#line 12 "../tmp/qtiplot/sipqtiMultiLayer.cpp"

#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 210 "/usr/share/sip/PyQt4/QtGui/qprinter.sip"
#include <qprinter.h>
#line 19 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 908 "src/scripting/qti.sip"
#include "src/Graph.h"
#include "src/Legend.h"
#include "src/lib/include/ColorButton.h"
#include "src/FunctionCurve.h"
#include "src/DataPointPicker.h"
#include <qwt_plot_canvas.h>
#line 27 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 30 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 1947 "src/scripting/qti.sip"
#include "src/Folder.h"
#line 36 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 249 "src/scripting/qti.sip"
#include "src/MyWidget.h"
#include "src/core/ApplicationWindow.h"
#line 40 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 43 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 505 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 46 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 618 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 49 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 474 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 52 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 252 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 55 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 524 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 58 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 548 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 61 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 561 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 67 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 574 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 73 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 607 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 76 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 596 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 79 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 82 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qmdiarea.sip"
#include <qmdiarea.h>
#line 88 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qmenu.sip"
#include <qmenu.h>
#line 91 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qmdisubwindow.sip"
#include <qmdisubwindow.h>
#line 94 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 97 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 100 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmargins.sip"
#include <qmargins.h>
#line 103 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 106 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 109 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 112 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 115 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qlocale.sip"
#include <qlocale.h>
#line 118 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 121 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qpoint.sip"
#include <qpoint.h>
#line 124 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qregion.sip"
#include <qregion.h>
#line 127 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 130 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 133 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 136 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 139 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 142 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 145 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 148 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 151 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpalette.sip"
#include <qpalette.h>
#line 154 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 157 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 647 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 160 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 739 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 163 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 792 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 166 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 765 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 169 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 781 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 172 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 854 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 175 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 403 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 178 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 347 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 181 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 184 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 52 "/usr/share/sip/PyQt4/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 187 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 34 "/usr/share/sip/PyQt4/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 190 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 193 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qaction.sip"
#include <qaction.h>
#line 196 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qlayout.sip"
#include <qlayout.h>
#line 199 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 202 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 205 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qcursor.sip"
#include <qcursor.h>
#line 208 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qicon.sip"
#include <qicon.h>
#line 211 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 214 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qstyle.sip"
#include <qstyle.h>
#line 217 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 220 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 223 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 226 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 229 "../tmp/qtiplot/sipqtiMultiLayer.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 232 "../tmp/qtiplot/sipqtiMultiLayer.cpp"


extern "C" {static PyObject *meth_MultiLayer_activeLayer(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_activeLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MultiLayer, &sipCpp))
        {
             ::Graph*sipRes;

            sipRes = sipCpp->activeGraph();

            return sipConvertFromType(sipRes,sipType_Graph,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_activeLayer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_setActiveLayer(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_setActiveLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph* a0;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_MultiLayer, &sipCpp, sipType_Graph, &a0))
        {
            sipCpp->setActiveGraph(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_setActiveLayer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_numLayers(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_numLayers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MultiLayer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->layers();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_numLayers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_layers(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_layers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MultiLayer, &sipCpp))
        {
             ::QWidgetList*sipRes;

            sipRes = new  ::QWidgetList(sipCpp->layerWidgets());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_layers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_layer(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_layer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_MultiLayer, &sipCpp, &a0))
        {
             ::Graph*sipRes;

            sipRes = sipCpp->layer(a0);

            return sipConvertFromType(sipRes,sipType_Graph,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_layer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_addLayer(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_addLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        int a1 = 0;
        int a2 = 0;
        int a3 = 0;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|iiii", &sipSelf, sipType_MultiLayer, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::Graph*sipRes = 0;

#line 1104 "src/scripting/qti.sip"
	sipRes = sipCpp->addLayer(a0, a1, a2, a3);
	ApplicationWindow *app = sipscidavis_app();
	if (app) app->setPreferences(sipRes);
#line 381 "../tmp/qtiplot/sipqtiMultiLayer.cpp"

            return sipConvertFromType(sipRes,sipType_Graph,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_addLayer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_setCols(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_setCols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_MultiLayer, &sipCpp, &a0))
        {
            sipCpp->setCols(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_setCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_setRows(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_setRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_MultiLayer, &sipCpp, &a0))
        {
            sipCpp->setRows(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_setRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_MultiLayer, &sipCpp, &a0, &a1))
        {
            sipCpp->setSpacing(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_setSpacing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_setMargins(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_setMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_MultiLayer, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_setMargins, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_setLayerCanvasSize(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_setLayerCanvasSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_MultiLayer, &sipCpp, &a0, &a1))
        {
#line 1115 "src/scripting/qti.sip"
	sipCpp->setLayerCanvasSize(a0, a1);
	sipCpp->arrangeLayers(true, true);
#line 513 "../tmp/qtiplot/sipqtiMultiLayer.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_setLayerCanvasSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_setAlignement(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_setAlignement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_MultiLayer, &sipCpp, &a0, &a1))
        {
            sipCpp->setAlignement(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_setAlignement, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_MultiLayer, &sipCpp, &a0, &a1))
        {
            sipCpp->setAlignement(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_setAlignment, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_arrangeLayers(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_arrangeLayers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_MultiLayer, &sipCpp, &a0))
        {
#line 1123 "src/scripting/qti.sip"
	sipCpp->arrangeLayers(a0, false);
#line 592 "../tmp/qtiplot/sipqtiMultiLayer.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        bool a0;
        bool a1;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bbb", &sipSelf, sipType_MultiLayer, &sipCpp, &a0, &a1))
        {
            sipCpp->arrangeLayers(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_arrangeLayers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_export(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_export(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MultiLayer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->exportToFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_export, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_exportImage(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_exportImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|i", &sipSelf, sipType_MultiLayer, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->exportImage(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_exportImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_exportVector(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_exportVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
        bool a2 = 1;
        bool a3 = 1;
         ::QPrinter::PaperSize a4 = QPrinter::Custom;
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|ibbE", &sipSelf, sipType_MultiLayer, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, &a3, sipType_QPrinter_PageSize, &a4))
        {
            sipCpp->exportVector(*a0,a1,a2,a3,a4);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_exportVector, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_MultiLayer_printDialog(PyObject *, PyObject *);}
static PyObject *meth_MultiLayer_printDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MultiLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MultiLayer, &sipCpp))
        {
            sipCpp->print();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Graph, sipName_printDialog, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_MultiLayer(void *, const sipTypeDef *);}
static void *cast_MultiLayer(void *sipCppV, const sipTypeDef *targetType)
{
     ::MultiLayer *sipCpp = reinterpret_cast< ::MultiLayer *>(sipCppV);

    if (targetType == sipType_MyWidget)
        return static_cast< ::MyWidget *>(sipCpp);

    if (targetType == sipType_QMdiSubWindow)
        return static_cast< ::QMdiSubWindow *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_MultiLayer(void *, int);}
static void release_MultiLayer(void *sipCppV, int)
{
     ::MultiLayer *sipCpp = reinterpret_cast< ::MultiLayer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_MultiLayer(sipSimpleWrapper *);}
static void dealloc_MultiLayer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_MultiLayer(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_MultiLayer[] = {{34, 255, 1}};


static PyMethodDef methods_MultiLayer[] = {
    {SIP_MLNAME_CAST(sipName_activeLayer), meth_MultiLayer_activeLayer, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_addLayer), meth_MultiLayer_addLayer, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_arrangeLayers), meth_MultiLayer_arrangeLayers, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_export), meth_MultiLayer_export, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_exportImage), meth_MultiLayer_exportImage, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_exportVector), meth_MultiLayer_exportVector, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_layer), meth_MultiLayer_layer, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_layers), meth_MultiLayer_layers, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_numLayers), meth_MultiLayer_numLayers, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_printDialog), meth_MultiLayer_printDialog, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setActiveLayer), meth_MultiLayer_setActiveLayer, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setAlignement), meth_MultiLayer_setAlignement, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_MultiLayer_setAlignment, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setCols), meth_MultiLayer_setCols, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setLayerCanvasSize), meth_MultiLayer_setLayerCanvasSize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setMargins), meth_MultiLayer_setMargins, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setRows), meth_MultiLayer_setRows, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_MultiLayer_setSpacing, METH_VARARGS, SIP_NULLPTR}
};


static pyqt4ClassPluginDef plugin_MultiLayer = {
    & ::MultiLayer::staticMetaObject,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_MultiLayer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_MultiLayer,
        {SIP_NULLPTR},
        &plugin_MultiLayer
    },
    {
        sipNameNr_Graph,
        {0, 0, 1},
        18, methods_MultiLayer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_MultiLayer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_MultiLayer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_MultiLayer,
    cast_MultiLayer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
