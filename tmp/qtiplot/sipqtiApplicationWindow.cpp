/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.20
 */

#include "sipAPIqti.h"

#line 1160 "src/scripting/qti.sip"
#include "src/core/ApplicationWindow.h"
#include "src/lib/include/ColorButton.h"
#include <qwt_symbol.h>
#line 14 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"

#line 26 "/usr/share/sip/PyQt4/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 18 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 249 "src/scripting/qti.sip"
#include "src/MyWidget.h"
#include "src/core/ApplicationWindow.h"
#line 22 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 908 "src/scripting/qti.sip"
#include "src/Graph.h"
#include "src/Legend.h"
#include "src/lib/include/ColorButton.h"
#include "src/FunctionCurve.h"
#include "src/DataPointPicker.h"
#include <qwt_plot_canvas.h>
#line 30 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 1947 "src/scripting/qti.sip"
#include "src/Folder.h"
#line 36 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 39 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 1094 "src/scripting/qti.sip"
#include "src/MultiLayer.h"
#line 42 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 493 "src/scripting/qti.sip"
#include "src/Matrix.h"
#define CHECK_MATRIX_COL(arg)\
	int col = arg-1;\
   if (col < 0 || col >= sipCpp->numCols()) {\
		sipIsErr = 1;\
		PyErr_Format(PyExc_ValueError, "There's no column %d in matrix %s!", col+1, sipCpp->objectName().toUtf8().constData());\
	}
#define CHECK_MATRIX_ROW(arg)\
   int row = arg-1;\
	if (row < 0 || row >= sipCpp->numRows()) {\
		sipIsErr = 1;\
		PyErr_Format(PyExc_ValueError, "There's no row %d in matrix %s!", row+1, sipCpp->objectName().toUtf8().constData());\
	}
#line 57 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 303 "src/scripting/qti.sip"
#include "src/Table.h"

#define CHECK_TABLE_COL(arg)\
    int col;\
    if (PYLong_Check(arg)) {\
      col = (int)PYLong_AsLong(arg) - 1;\
		if (col < 0 || col >= sipCpp->numCols()) {\
			sipIsErr = 1;\
			PyErr_Format(PyExc_ValueError, "There's no column %d in table %s!", col+1, sipCpp->objectName().toUtf8().constData());\
		}\
	 } else {\
      PyObject *tmp = PyObject_Str(arg);\
		if (!tmp) {\
			sipIsErr = 1;\
			PyErr_Format(PyExc_TypeError, "Column argument must be either int or string.");\
		} else {\
			col = sipCpp->colNames().indexOf(PYUNICODE_AsUTF8(tmp));\
			if (col < 0) {\
				sipIsErr = 1;\
				PyErr_Format(PyExc_ValueError, "There's no column named %s in table %s!", PYUNICODE_AsUTF8(tmp),\
						sipCpp->name().toUtf8().constData());\
				Py_DECREF(tmp);\
			}\
		}\
	 }
#define CHECK_TABLE_ROW(arg)\
   int row = arg-1;\
	if (row < 0 || row >= sipCpp->numRows()) {\
		sipIsErr = 1;\
		PyErr_Format(PyExc_ValueError, "There's no row %d in table %s!", row+1, sipCpp->objectName().toUtf8().constData());\
	}

#line 91 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 1141 "src/scripting/qti.sip"
#include "src/Note.h"
#line 94 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 97 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qdockwidget.sip"
#include <qdockwidget.h>
#line 100 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 103 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qtabwidget.sip"
#include <qtabwidget.h>
#line 106 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 109 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qtoolbar.sip"
#include <qtoolbar.h>
#line 112 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qmainwindow.sip"
#include <qmainwindow.h>
#line 115 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 118 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qpoint.sip"
#include <qpoint.h>
#line 121 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 124 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 618 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 127 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 130 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qmenu.sip"
#include <qmenu.h>
#line 133 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 136 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qstatusbar.sip"
#include <qstatusbar.h>
#line 139 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qmenubar.sip"
#include <qmenubar.h>
#line 142 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 145 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmargins.sip"
#include <qmargins.h>
#line 148 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 151 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 154 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 157 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qlocale.sip"
#include <qlocale.h>
#line 160 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 163 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qregion.sip"
#include <qregion.h>
#line 166 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 169 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 172 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 175 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 178 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 181 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 184 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 187 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qpalette.sip"
#include <qpalette.h>
#line 190 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 193 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 647 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 196 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 607 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 199 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 596 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 202 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 739 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 205 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 792 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 208 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 765 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 211 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 781 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 214 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 854 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 217 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 403 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 220 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 574 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 223 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 561 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 226 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 548 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 229 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 524 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 232 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 505 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 235 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 474 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 238 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 347 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 241 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 252 "/usr/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 244 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 247 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 52 "/usr/share/sip/PyQt4/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 250 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 34 "/usr/share/sip/PyQt4/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 253 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 256 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qaction.sip"
#include <qaction.h>
#line 259 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qlayout.sip"
#include <qlayout.h>
#line 262 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 265 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 268 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 271 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qcursor.sip"
#include <qcursor.h>
#line 274 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qicon.sip"
#include <qicon.h>
#line 277 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 280 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtGui/qstyle.sip"
#include <qstyle.h>
#line 283 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 286 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 289 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 292 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 295 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 298 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 301 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 304 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 307 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"


extern "C" {static PyObject *meth_ApplicationWindow_exit(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_exit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_ApplicationWindow, &sipCpp, &a0))
        {
#line 1174 "src/scripting/qti.sip"
  ::exit(a0);
#line 323 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_exit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_switchToLanguage(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_switchToLanguage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->switchToLanguage(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_switchToLanguage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_table(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_table(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::Table*sipRes = 0;

#line 1180 "src/scripting/qti.sip"
  sipRes = sipCpp->current_folder->table(*a0, false);
  if(!sipRes)
    sipRes = sipCpp->projectFolder()->table(*a0, true);
#line 382 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_Table,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_table, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_newTable(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_newTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ApplicationWindow, &sipCpp))
        {
             ::Table*sipRes;

            sipRes = sipCpp->newTable();

            return sipConvertFromType(sipRes,sipType_Table,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 2;
        int a2 = 30;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|ii", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
             ::Table*sipRes = 0;

#line 1187 "src/scripting/qti.sip"
  sipRes = sipCpp->newTable(a2, a1, *a0);
#line 427 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_Table,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_newTable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_matrix(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_matrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::Matrix*sipRes = 0;

#line 1191 "src/scripting/qti.sip"
  sipRes = sipCpp->current_folder->matrix(*a0, false);
  if(!sipRes)
    sipRes = sipCpp->projectFolder()->matrix(*a0, true);
#line 459 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_Matrix,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_matrix, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_newMatrix(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_newMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ApplicationWindow, &sipCpp))
        {
             ::Matrix*sipRes;

            sipRes = sipCpp->newMatrix();

            return sipConvertFromType(sipRes,sipType_Matrix,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 32;
        int a2 = 32;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|ii", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
             ::Matrix*sipRes;

            sipRes = sipCpp->newMatrix(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_Matrix,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_newMatrix, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_graph(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_graph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::MultiLayer*sipRes = 0;

#line 1199 "src/scripting/qti.sip"
  sipRes = sipCpp->current_folder->graph(*a0, false);
  if(!sipRes)
    sipRes = sipCpp->projectFolder()->graph(*a0, true);
#line 534 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_MultiLayer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_graph, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_newGraph(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_newGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ApplicationWindow, &sipCpp))
        {
             ::MultiLayer*sipRes;

            sipRes = sipCpp->newGraph();

            return sipConvertFromType(sipRes,sipType_MultiLayer,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::MultiLayer*sipRes = 0;

#line 1206 "src/scripting/qti.sip"
	// Code copied from ApplicationWindow::newGraph() and modified to actually use the requested
	// name if it is already unique.
	if (sipCpp->alreadyUsedName(*a0))
		sipRes = sipCpp->multilayerPlot(sipCpp->generateUniqueName(*a0));
	else
		sipRes = sipCpp->multilayerPlot(*a0);
	if (sipRes) {
		Graph *g = sipRes->addLayer();
		sipCpp->setPreferences(g);
		g->newLegend();
		g->setAutoscaleFonts(false);
		g->setIgnoreResizeEvents(false);
		sipRes->arrangeLayers(false, false);
		sipRes->adjustSize();
		g->setAutoscaleFonts(sipCpp->autoScaleFonts);//restore user defined fonts behaviour
		g->setIgnoreResizeEvents(!sipCpp->autoResizeLayers);
		sipCpp->customMenu(sipRes);
	}
#line 594 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_MultiLayer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_newGraph, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_note(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_note(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::Note*sipRes = 0;

#line 1227 "src/scripting/qti.sip"
  sipRes = sipCpp->current_folder->note(*a0, false);
  if(!sipRes)
    sipRes = sipCpp->projectFolder()->note(*a0, true);
#line 626 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_Note,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_note, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_newNote(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_newNote(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString::null;
        const  ::QString* a0 = &a0def;
        int a0State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::Note*sipRes;

            sipRes = sipCpp->newNote(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_Note,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_newNote, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_plot(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_plot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Table* a0;
        PyObject * a1;
        int a2 = 1;
        int a3 = -1;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8T|ii", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_Table, &a0, &PyTuple_Type, &a1, &a2, &a3))
        {
             ::MultiLayer*sipRes = 0;
            int sipIsErr = 0;

#line 1238 "src/scripting/qti.sip"
  QStringList l;
  int n = PyTuple_Size(a1);
  for (int i=0; i<n; i++) {
    PyObject *str = PyObject_Str(PyTuple_GET_ITEM(a1,i));
    if (str) {
      l << PYUNICODE_AsUTF8(str);
		Py_DECREF(str);
	 } else {
      sipIsErr = 1;
      break;
    }
  }
  if (a0==0) {
	  sipIsErr = 1;
	  PyErr_Format(PyExc_ValueError, "Invalid table in argument to plot().");
  } else {
    sipRes = sipCpp->multilayerPlot(a0, l, a2);
    if (sipRes && sipRes->activeGraph() && a3 >= 0) {
		 for (int c =0; c < sipRes->activeGraph()->curves(); c++) {
			 QwtPlotCurve *curve = sipRes->activeGraph()->curve(c);
			 QPen pen = curve->pen();
			 pen.setColor(ColorButton::color(a3));
			 curve->setPen(pen);
			 QwtSymbol symbol = curve->symbol();
			 pen = symbol.pen();
			 pen.setColor(ColorButton::color(a3));
			 symbol.setPen(pen);
			 QBrush brush = symbol.brush();
			 brush.setColor(ColorButton::color(a3));
			 symbol.setBrush(brush);
			 curve->setSymbol(symbol);
		 }
    }
  }
#line 721 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_MultiLayer,SIP_NULLPTR);
        }
    }

    {
         ::Table* a0;
        const  ::QString* a1;
        int a1State = 0;
        int a2 = 1;
        int a3 = -1;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1|ii", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_Table, &a0, sipType_QString,&a1, &a1State, &a2, &a3))
        {
             ::MultiLayer*sipRes = 0;
            int sipIsErr = 0;

#line 1275 "src/scripting/qti.sip"
  if (a0==0) {
	  sipIsErr = 1;
	  PyErr_Format(PyExc_ValueError, "Invalid table in argument to plot().");
  } else {
    QStringList l;
    l << *a1;
    sipRes = sipCpp->multilayerPlot(a0, l, a2);
    if (a3 >= 0) {
       QwtPlotCurve * c = sipRes->activeGraph()->curve(0);
       QPen pen = c->pen();
       pen.setColor(ColorButton::color(a3));
       c->setPen(pen);
		 QwtSymbol symbol = c->symbol();
		 pen = symbol.pen();
		 pen.setColor(ColorButton::color(a3));
		 symbol.setPen(pen);
		 QBrush brush = symbol.brush();
		 brush.setColor(ColorButton::color(a3));
		 symbol.setBrush(brush);
		 c->setSymbol(symbol);
    }
  }
#line 766 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_MultiLayer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_plot, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_importImage(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_importImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ApplicationWindow, &sipCpp))
        {
             ::Matrix*sipRes;

            sipRes = sipCpp->importImage();

            return sipConvertFromType(sipRes,sipType_Matrix,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::Matrix*sipRes;

            sipRes = sipCpp->importImage(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_Matrix,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_importImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_plotContour(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_plotContour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix* a0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_Matrix, &a0))
        {
             ::MultiLayer*sipRes;

            sipRes = sipCpp->plotContour(a0);

            return sipConvertFromType(sipRes,sipType_MultiLayer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_plotContour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_plotColorMap(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_plotColorMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix* a0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_Matrix, &a0))
        {
             ::MultiLayer*sipRes;

            sipRes = sipCpp->plotColorMap(a0);

            return sipConvertFromType(sipRes,sipType_MultiLayer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_plotColorMap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_plotGrayScale(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_plotGrayScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Matrix* a0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_Matrix, &a0))
        {
             ::MultiLayer*sipRes;

            sipRes = sipCpp->plotGrayScale(a0);

            return sipConvertFromType(sipRes,sipType_MultiLayer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_plotGrayScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_windows(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_windows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ApplicationWindow, &sipCpp))
        {
            QList< ::MyWidget*>*sipRes;

            sipRes = new QList< ::MyWidget*>(sipCpp->windowsList());

            return sipConvertFromNewType(sipRes,sipType_QList_0101MyWidget,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_windows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_activeFolder(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_activeFolder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ApplicationWindow, &sipCpp))
        {
             ::Folder*sipRes = 0;

#line 1313 "src/scripting/qti.sip"
  sipRes = sipCpp->current_folder;
#line 941 "../tmp/qtiplot/sipqtiApplicationWindow.cpp"

            return sipConvertFromType(sipRes,sipType_Folder,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_activeFolder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_setActiveFolder(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_setActiveFolder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Folder* a0;
        bool a1 = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|b", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_Folder, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->changeFolder(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_setActiveFolder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_saveFolder(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_saveFolder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Folder* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_Folder, &a0, sipType_QString,&a1, &a1State))
        {
            if (sipDeprecated(sipName_ApplicationWindow,sipName_saveFolder) < 0)
                return SIP_NULLPTR;

            sipCpp->saveFolder(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_saveFolder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_rootFolder(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_rootFolder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ApplicationWindow, &sipCpp))
        {
             ::Folder*sipRes;

            sipRes = sipCpp->projectFolder();

            return sipConvertFromType(sipRes,sipType_Folder,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_rootFolder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_renameWindow(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_renameWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MyWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_MyWidget, &a0, sipType_QString,&a1, &a1State))
        {
            if (sipDeprecated(sipName_ApplicationWindow,sipName_renameWindow) < 0)
                return SIP_NULLPTR;

            sipCpp->renameWindow(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_renameWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_setPreferences(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_setPreferences(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Graph* a0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_Graph, &a0))
        {
            if (sipDeprecated(sipName_ApplicationWindow,sipName_setPreferences) < 0)
                return SIP_NULLPTR;

            sipCpp->setPreferences(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_setPreferences, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ApplicationWindow_clone(PyObject *, PyObject *);}
static PyObject *meth_ApplicationWindow_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::MyWidget* a0;
         ::ApplicationWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_ApplicationWindow, &sipCpp, sipType_MyWidget, &a0))
        {
             ::MyWidget*sipRes;

            if (sipDeprecated(sipName_ApplicationWindow,sipName_clone) < 0)
                return SIP_NULLPTR;

            sipRes = sipCpp->clone(a0);

            return sipConvertFromType(sipRes,sipType_MyWidget,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ApplicationWindow, sipName_clone, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_ApplicationWindow(void *, const sipTypeDef *);}
static void *cast_ApplicationWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::ApplicationWindow *sipCpp = reinterpret_cast< ::ApplicationWindow *>(sipCppV);

    if (targetType == sipType_QMainWindow)
        return static_cast< ::QMainWindow *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_ApplicationWindow(void *, int);}
static void release_ApplicationWindow(void *sipCppV, int)
{
     ::ApplicationWindow *sipCpp = reinterpret_cast< ::ApplicationWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_ApplicationWindow(sipSimpleWrapper *);}
static void dealloc_ApplicationWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_ApplicationWindow(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_ApplicationWindow[] = {{18, 1, 1}};


static PyMethodDef methods_ApplicationWindow[] = {
    {SIP_MLNAME_CAST(sipName_activeFolder), meth_ApplicationWindow_activeFolder, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_clone), meth_ApplicationWindow_clone, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_exit), meth_ApplicationWindow_exit, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_graph), meth_ApplicationWindow_graph, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_importImage), meth_ApplicationWindow_importImage, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_matrix), meth_ApplicationWindow_matrix, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_newGraph), meth_ApplicationWindow_newGraph, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_newMatrix), meth_ApplicationWindow_newMatrix, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_newNote), meth_ApplicationWindow_newNote, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_newTable), meth_ApplicationWindow_newTable, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_note), meth_ApplicationWindow_note, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_plot), meth_ApplicationWindow_plot, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_plotColorMap), meth_ApplicationWindow_plotColorMap, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_plotContour), meth_ApplicationWindow_plotContour, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_plotGrayScale), meth_ApplicationWindow_plotGrayScale, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_renameWindow), meth_ApplicationWindow_renameWindow, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_rootFolder), meth_ApplicationWindow_rootFolder, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_saveFolder), meth_ApplicationWindow_saveFolder, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setActiveFolder), meth_ApplicationWindow_setActiveFolder, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setPreferences), meth_ApplicationWindow_setPreferences, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_switchToLanguage), meth_ApplicationWindow_switchToLanguage, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_table), meth_ApplicationWindow_table, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_windows), meth_ApplicationWindow_windows, METH_VARARGS, SIP_NULLPTR}
};


extern "C" {static PyObject *varget_ApplicationWindow_results(void *, PyObject *, PyObject *);}
static PyObject *varget_ApplicationWindow_results(void *sipSelf, PyObject *, PyObject *)
{
     ::QTextEdit*sipVal;
     ::ApplicationWindow *sipCpp = reinterpret_cast< ::ApplicationWindow *>(sipSelf);

    sipVal = sipCpp->results;

    return sipConvertFromType(sipVal, sipType_QTextEdit, SIP_NULLPTR);
}


extern "C" {static int varset_ApplicationWindow_results(void *, PyObject *, PyObject *);}
static int varset_ApplicationWindow_results(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QTextEdit*sipVal;
     ::ApplicationWindow *sipCpp = reinterpret_cast< ::ApplicationWindow *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QTextEdit *>(sipForceConvertToType(sipPy, sipType_QTextEdit, SIP_NULLPTR, 0, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->results = sipVal;

    return 0;
}

sipVariableDef variables_ApplicationWindow[] = {
    {InstanceVariable, sipName_results, (PyMethodDef *)varget_ApplicationWindow_results, (PyMethodDef *)varset_ApplicationWindow_results, SIP_NULLPTR, SIP_NULLPTR},
};


static pyqt4ClassPluginDef plugin_ApplicationWindow = {
    & ::ApplicationWindow::staticMetaObject,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_qti_ApplicationWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_ApplicationWindow,
        {SIP_NULLPTR},
        &plugin_ApplicationWindow
    },
    {
        sipNameNr_ApplicationWindow,
        {0, 0, 1},
        23, methods_ApplicationWindow,
        0, SIP_NULLPTR,
        1, variables_ApplicationWindow,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_ApplicationWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_ApplicationWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_ApplicationWindow,
    cast_ApplicationWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
